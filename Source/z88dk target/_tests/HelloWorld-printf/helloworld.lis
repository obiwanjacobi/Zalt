1     0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
2     0000              ; SELECT CRT0 FROM -STARTUP=N COMMANDLINE OPTION ;;;;;;;;;;;;;;
3     0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
4     0000              
5     0000              INCLUDE "zcc_opt.def"
1     0000              
2     0000              IF !DEFINED_Z88DK_USES_SDCC
3     0000              	defc	DEFINED_Z88DK_USES_SDCC = 1
4     0000              	defc Z88DK_USES_SDCC = 1
5     0000              	IFNDEF Z88DK_USES_SDCC
6     0000              	ENDIF
7     0000              ENDIF
8     0000              
9     0000              
6     0000              
7     0000              IFNDEF startup
8     0000              
9     0000                 ; startup undefined so select a default
10    0000              
11    0000                 defc startup = 0
12    0000              
13    0000              ENDIF
14    0000              
15    0000              
16    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
17    0000              ;; user supplied crt ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
18    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
19    0000              
20    0000              IF startup = -1
21    0000              
22    0000                 INCLUDE "crt.asm"
23    0000              
24    0000              ENDIF
25    0000              
26    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
27    0000              ;; ram model ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
28    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
29    0000              
30    0000              IF startup = 0
31    0000              
32    0000                 ; generic zalt startup
33    0000              
34    0000                 IFNDEF __CRTDEF
35    0000              
36    0000                    defc __CRTDEF = 0
37    0000              
38    0000                 ENDIF
39    0000              
40    0000                 IFNDEF __MMAP
41    0000              
42    0000                    defc __MMAP = 0
43    0000              
44    0000                 ENDIF
45    0000              
46    0000                 INCLUDE "startup/zalt_crt_0.asm"
1     0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
2     0000              ;;                  zalt standalone target                   ;;
3     0000              ;;      generated by target/temp/startup/zalt_crt_0.m4       ;;
4     0000              ;;                                                           ;;
5     0000              ;;                  flat 64k address space                   ;;
6     0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
7     0000              
8     0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
9     0000              ;; CRT AND CLIB CONFIGURATION ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
10    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
11    0000              
12    0000              include "../crt_defaults.inc"
1     0000              
2     0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
3     0000              ;; crt defaults ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
4     0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
5     0000              
6     0000                 ; crt configuration
7     0000              
8     0000                 defc DEF__crt_org_code              = 0       ;; org of code section
9     0000                 defc DEF__crt_org_data              = 0       ;; org of data section (0 or -1 means follow code, -1 means generate separate binary)
10    0000                 defc DEF__crt_org_bss               = 0       ;; org of bss section (0 or -1 means follow data, -1 means generate separate binary)
11    0000              
12    0000                 defc DEF__crt_model                 = 0       ;; 0 = ram model, 1 = rom model, 2 = compressed rom model
13    0000              
14    0000                 defc DEF__register_sp               = 0       ;; initial value of sp (-1 = do not modify (some targets may redefine meaning), 0 = top of memory)
15    0000                 defc DEF__crt_stack_size            = 512     ;; minimum size reserved for stack when automatically allocating memory for the malloc heap
16    0000              
17    0000                 defc DEF__crt_initialize_bss        = 0       ;; generate code to initialize bss section at startup (only applicable if ram model in use)
18    0000              
19    0000                 defc DEF__crt_include_preamble      = 0       ;; if non-zero, user supplies code in file "crt_preamble.asm" that is inserted at the start of the binary
20    0000              
21    0000                 defc DEF__crt_enable_streams        = 0x7     ;; set bit enables stream, stdin/stdout/stderr enabled
22    0000              
23    0000                 defc DEF__crt_enable_commandline    = 2       ;; generate argc and argv from command line (targets without command line will get argc=1, argv[0]="", argv[1]=NULL)
24    0000                 defc DEF__crt_enable_restart        = 0       ;; if non-zero, restart the program on exit (correct initialization of static variables with rom models only)
25    0000                 defc DEF__crt_enable_close          = 1       ;; if non-zero, close files on exit
26    0000              
27    0000                 defc DEF__crt_enable_eidi           = 0       ;; bit flags: 0x01 = di on restart, 0x02 = ei on restart, 0x10 = di on exit, 0x20 = ei on exit
28    0000                 defc DEF__crt_on_exit               = 0x10001 ;; halt on exit (see documentation for other exit behaviours)
29    0000              
30    0000                 defc DEF__crt_enable_rst            = 0       ;; if non-zero and in some crts with code org = 0, set bits indicate which rst locations are implemented with user code
31    0000                 defc DEF__crt_enable_nmi            = 0       ;; if non-zero and in some crts with code org = 0, a jump to user code to service the nmi is inserted
32    0000              
33    0000                 ; clib defaults
34    0000              
35    0000                 defc DEF__clib_exit_stack_size      = 32      ;; max number of functions that can be registered with atexit()
36    0000                 defc DEF__clib_quickexit_stack_size = 32      ;; max number of functions that can be registered with at_quickexit()
37    0000              
38    0000                 defc DEF__clib_malloc_heap_size     = -1      ;; size of malloc heap (0 = do not create a heap, -1 = automatically place heap between end of bss section and bottom of stack)
39    0000                 defc DEF__clib_stdio_heap_size      = 256     ;; size of stdio heap (0 = do not allocate bytes for opening of files)
40    0000              
41    0000                 defc DEF__clib_balloc_table_size    = 0       ;; number of queues created for balloc block memory allocator
42    0000              
43    0000                 defc DEF__clib_fopen_max            = 8       ;; max number of FILE* (-1 = do not create list of open FILE* (only effective if no stdin/stdout/stderr))
44    0000                 defc DEF__clib_open_max             = 8       ;; max number of open files
45    0000              
46    0000              ;; end crt defaults ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
47    0000              
13    0000              include "crt_target_defaults.inc"
1     0000              
2     0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
3     0000              ;; crt target defaults ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
4     0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
5     0000              
6     0000              IF __CRTDEF = -1
7     0000              
8     0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
9     0000                 ;; user supplied crt defaults ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
10    0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
11    0000              
12    0000                 INCLUDE "crtdef.inc"
13    0000              
14    0000              ENDIF
15    0000              
16    0000              IF __CRTDEF = 0
17    0000              
18    0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
19    0000                 ;; zalt ram model ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
20    0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
21    0000              
22    0000                 defc TAR__crt_org_code              = 0 ; was 32768!
23    0000                 defc TAR__crt_org_data              = 0
24    0000                 defc TAR__crt_org_bss               = 0
25    0000              
26    0000                 defc TAR__crt_model                 = 0
27    0000              
28    0000                 defc TAR__register_sp               = 0
29    0000                 defc TAR__crt_stack_size            = 512
30    0000              
31    0000                 defc TAR__crt_initialize_bss        = 0
32    0000              
33    0000                 defc TAR__crt_enable_commandline    = 0
34    0000                 defc TAR__crt_enable_restart        = 0
35    0000                 defc TAR__crt_enable_close          = 1
36    0000              
37    0000                 defc TAR__crt_enable_rst            = 0
38    0000                 defc TAR__crt_enable_nmi            = 0
39    0000              
40    0000                 ; clib defaults
41    0000              
42    0000                 defc TAR__clib_exit_stack_size      = 2
43    0000                 defc TAR__clib_quickexit_stack_size = 0
44    0000              
45    0000                 defc TAR__clib_malloc_heap_size     = -1
46    0000                 defc TAR__clib_stdio_heap_size      = 128
47    0000              
48    0000                 defc TAR__clib_balloc_table_size    = 0
49    0000              
50    0000                 defc TAR__clib_fopen_max            = 0
51    0000                 defc TAR__clib_open_max             = 0
52    0000              
53    0000              ENDIF
54    0000              
55    0000              ;; end crt target defaults ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
56    0000              
14    0000              include "../crt_rules.inc"
1     0000              
2     0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
3     0000              ;; crt rules ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
4     0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
5     0000              
6     0000              
7     0000                 IFDEF myzorg
8     0000              
9     0000                    defc __crt_org_code = myzorg
10    0000              
11    0000                 ELSE
12    0000              
13    0000                    IFDEF CRT_ORG_CODE
14    0000              
15    0000                       defc __crt_org_code = CRT_ORG_CODE
16    0000              
17    0000                    ELSE
18    0000              
19    0000                       IFDEF TAR__crt_org_code
20    0000              
21    0000                          defc __crt_org_code = TAR__crt_org_code
22    0000              
23    0000                       ELSE
24    0000              
25    0000                          defc __crt_org_code = DEF__crt_org_code
26    0000              
27    0000                       ENDIF
28    0000              
29    0000                    ENDIF
30    0000              
31    0000                    defc myzorg = __crt_org_code
32    0000              
33    0000                 ENDIF
34    0000              
35    0000              
36    0000                 IFDEF REGISTER_SP
37    0000              
38    0000                    defc __register_sp = REGISTER_SP
39    0000              
40    0000                 ELSE
41    0000              
42    0000                    IFDEF STACKPTR
43    0000              
44    0000                       defc __register_sp = STACKPTR
45    0000              
46    0000                    ELSE
47    0000              
48    0000                       IFDEF TAR__register_sp
49    0000              
50    0000                          defc __register_sp = TAR__register_sp
51    0000              
52    0000                       ELSE
53    0000              
54    0000                          defc __register_sp = DEF__register_sp
55    0000              
56    0000                       ENDIF
57    0000              
58    0000                    ENDIF
59    0000              
60    0000                 ENDIF
61    0000              
62    0000              
63    0000                 IFDEF CRT_STACK_SIZE
64    0000              
65    0000                    defc __crt_stack_size = CRT_STACK_SIZE
66    0000              
67    0000                 ELSE
68    0000              
69    0000                    IFDEF TAR__crt_stack_size
70    0000              
71    0000                       defc __crt_stack_size = TAR__crt_stack_size
72    0000              
73    0000                    ELSE
74    0000              
75    0000                       defc __crt_stack_size = DEF__crt_stack_size
76    0000              
77    0000                    ENDIF
78    0000              
79    0000                 ENDIF
80    0000              
81    0000              
82    0000                 IFDEF CRT_ORG_DATA
83    0000              
84    0000                    defc __crt_org_data = CRT_ORG_DATA
85    0000              
86    0000                 ELSE
87    0000              
88    0000                    IFDEF TAR__crt_org_data
89    0000              
90    0000                       defc __crt_org_data = TAR__crt_org_data
91    0000              
92    0000                    ELSE
93    0000              
94    0000                       defc __crt_org_data = DEF__crt_org_data
95    0000              
96    0000                    ENDIF
97    0000              
98    0000                 ENDIF
99    0000              
100   0000              
101   0000                 IFDEF CRT_ORG_BSS
102   0000              
103   0000                    defc __crt_org_bss = CRT_ORG_BSS
104   0000              
105   0000                 ELSE
106   0000              
107   0000                    IFDEF TAR__crt_org_bss
108   0000              
109   0000                       defc __crt_org_bss = TAR__crt_org_bss
110   0000              
111   0000                    ELSE
112   0000              
113   0000                       defc __crt_org_bss = DEF__crt_org_bss
114   0000              
115   0000                    ENDIF
116   0000              
117   0000                 ENDIF
118   0000              
119   0000              
120   0000                 IFDEF CRT_MODEL
121   0000              
122   0000                    defc __crt_model = CRT_MODEL
123   0000              
124   0000                 ELSE
125   0000              
126   0000                    IFDEF TAR__crt_model
127   0000              
128   0000                       defc __crt_model = TAR__crt_model
129   0000              
130   0000                    ELSE
131   0000              
132   0000                       defc __crt_model = DEF__crt_model
133   0000              
134   0000                    ENDIF
135   0000              
136   0000                 ENDIF
137   0000              
138   0000              
139   0000                 IFDEF CRT_INITIALIZE_BSS
140   0000              
141   0000                    defc __crt_initialize_bss = CRT_INITIALIZE_BSS
142   0000              
143   0000                 ELSE
144   0000              
145   0000                    IFDEF TAR__crt_initialize_bss
146   0000              
147   0000                       defc __crt_initialize_bss = TAR__crt_initialize_bss
148   0000              
149   0000                    ELSE
150   0000              
151   0000                       defc __crt_initialize_bss = DEF__crt_initialize_bss
152   0000              
153   0000                    ENDIF
154   0000              
155   0000                 ENDIF
156   0000              
157   0000              
158   0000                 IFDEF CRT_INCLUDE_PREAMBLE
159   0000              
160   0000                    defc __crt_include_preamble = CRT_INCLUDE_PREAMBLE
161   0000              
162   0000                 ELSE
163   0000              
164   0000                    IFDEF TAR__crt_include_preamble
165   0000              
166   0000                       defc __crt_include_preamble = TAR__crt_include_preamble
167   0000              
168   0000                    ELSE
169   0000              
170   0000                       defc __crt_include_preamble = DEF__crt_include_preamble
171   0000              
172   0000                    ENDIF
173   0000              
174   0000                 ENDIF
175   0000              
176   0000              
177   0000                 IFDEF CRT_ENABLE_STREAMS
178   0000              
179   0000                    defc __crt_enable_streams = CRT_ENABLE_STREAMS
180   0000              
181   0000                 ELSE
182   0000              
183   0000                    IFDEF TAR__crt_enable_streams
184   0000              
185   0000                       defc __crt_enable_streams = TAR__crt_enable_streams
186   0000              
187   0000                    ELSE
188   0000              
189   0000                       defc __crt_enable_streams = DEF__crt_enable_streams
190   0000              
191   0000                    ENDIF
192   0000              
193   0000                 ENDIF
194   0000              
195   0000              
196   0000                 IFDEF CRT_ENABLE_COMMANDLINE
197   0000              
198   0000                    defc __crt_enable_commandline = CRT_ENABLE_COMMANDLINE
199   0000              
200   0000                 ELSE
201   0000              
202   0000                    IFDEF TAR__crt_enable_commandline
203   0000              
204   0000                       defc __crt_enable_commandline = TAR__crt_enable_commandline
205   0000              
206   0000                    ELSE
207   0000              
208   0000                       defc __crt_enable_commandline = DEF__crt_enable_commandline
209   0000              
210   0000                    ENDIF
211   0000              
212   0000                 ENDIF
213   0000              
214   0000              
215   0000                 IFDEF CRT_ENABLE_RESTART
216   0000              
217   0000                    defc __crt_enable_restart = CRT_ENABLE_RESTART
218   0000              
219   0000                 ELSE
220   0000              
221   0000                    IFDEF TAR__crt_enable_restart
222   0000              
223   0000                       defc __crt_enable_restart = TAR__crt_enable_restart
224   0000              
225   0000                    ELSE
226   0000              
227   0000                       defc __crt_enable_restart = DEF__crt_enable_restart
228   0000              
229   0000                    ENDIF
230   0000              
231   0000                 ENDIF
232   0000              
233   0000              
234   0000                 IFDEF CRT_ENABLE_CLOSE
235   0000              
236   0000                    defc __crt_enable_close = CRT_ENABLE_CLOSE
237   0000              
238   0000                 ELSE
239   0000              
240   0000                    IFDEF TAR__crt_enable_close
241   0000              
242   0000                       defc __crt_enable_close = TAR__crt_enable_close
243   0000              
244   0000                    ELSE
245   0000              
246   0000                       defc __crt_enable_close = DEF__crt_enable_close
247   0000              
248   0000                    ENDIF
249   0000              
250   0000                 ENDIF
251   0000              
252   0000              
253   0000                 IFDEF CRT_ENABLE_EIDI
254   0000              
255   0000                    defc __crt_enable_eidi = CRT_ENABLE_EIDI
256   0000              
257   0000                 ELSE
258   0000              
259   0000                    IFDEF TAR__crt_enable_eidi
260   0000              
261   0000                       defc __crt_enable_eidi = TAR__crt_enable_eidi
262   0000              
263   0000                    ELSE
264   0000              
265   0000                       defc __crt_enable_eidi = DEF__crt_enable_eidi
266   0000              
267   0000                    ENDIF
268   0000              
269   0000                 ENDIF
270   0000              
271   0000              
272   0000                 IF __crt_enable_restart
273   0000              
274   0000                    defc __crt_on_exit = 0x10008
275   0000              
276   0000                 ELSE
277   0000              
278   0000                    IFDEF CRT_ON_EXIT
279   0000              
280   0000                       defc __crt_on_exit = CRT_ON_EXIT
281   0000              
282   0000                    ELSE
283   0000              
284   0000                       IFDEF TAR__crt_on_exit
285   0000              
286   0000                          defc __crt_on_exit = TAR__crt_on_exit
287   0000              
288   0000                       ELSE
289   0000              
290   0000                          defc __crt_on_exit = DEF__crt_on_exit
291   0000              
292   0000                       ENDIF
293   0000              
294   0000                    ENDIF
295   0000              
296   0000                 ENDIF
297   0000              
298   0000              
299   0000                 IFDEF CLIB_EXIT_STACK_SIZE
300   0000              
301   0000                    defc __clib_exit_stack_size = CLIB_EXIT_STACK_SIZE
302   0000              
303   0000                 ELSE
304   0000              
305   0000                    IFDEF TAR__clib_exit_stack_size
306   0000              
307   0000                       defc __clib_exit_stack_size = TAR__clib_exit_stack_size
308   0000              
309   0000                    ELSE
310   0000              
311   0000                       defc __clib_exit_stack_size = DEF__clib_exit_stack_size
312   0000              
313   0000                    ENDIF
314   0000              
315   0000                 ENDIF
316   0000              
317   0000              
318   0000                 IFDEF CLIB_QUICKEXIT_STACK_SIZE
319   0000              
320   0000                    defc __clib_quickexit_stack_size = CLIB_QUICKEXIT_STACK_SIZE
321   0000              
322   0000                 ELSE
323   0000              
324   0000                    IFDEF TAR__clib_quickexit_stack_size
325   0000              
326   0000                       defc __clib_quickexit_stack_size = TAR__clib_quickexit_stack_size
327   0000              
328   0000                    ELSE
329   0000              
330   0000                       defc __clib_quickexit_stack_size = DEF__clib_quickexit_stack_size
331   0000              
332   0000                    ENDIF
333   0000              
334   0000                 ENDIF
335   0000              
336   0000              
337   0000                 IFDEF CLIB_MALLOC_HEAP_SIZE
338   0000              
339   0000                    defc __clib_malloc_heap_size = CLIB_MALLOC_HEAP_SIZE
340   0000              
341   0000                 ELSE
342   0000              
343   0000                    IFDEF TAR__clib_malloc_heap_size
344   0000              
345   0000                       defc __clib_malloc_heap_size = TAR__clib_malloc_heap_size
346   0000              
347   0000                    ELSE
348   0000              
349   0000                       defc __clib_malloc_heap_size = DEF__clib_malloc_heap_size
350   0000              
351   0000                    ENDIF
352   0000              
353   0000                 ENDIF
354   0000              
355   0000              
356   0000                 IFDEF CLIB_STDIO_HEAP_SIZE
357   0000              
358   0000                    defc __clib_stdio_heap_size = CLIB_STDIO_HEAP_SIZE
359   0000              
360   0000                 ELSE
361   0000              
362   0000                    IFDEF TAR__clib_stdio_heap_size
363   0000              
364   0000                       defc __clib_stdio_heap_size = TAR__clib_stdio_heap_size
365   0000              
366   0000                    ELSE
367   0000              
368   0000                       defc __clib_stdio_heap_size = DEF__clib_stdio_heap_size
369   0000              
370   0000                    ENDIF
371   0000              
372   0000                 ENDIF
373   0000              
374   0000              
375   0000                 IFDEF CLIB_BALLOC_TABLE_SIZE
376   0000              
377   0000                    defc __clib_balloc_table_size = CLIB_BALLOC_TABLE_SIZE
378   0000              
379   0000                 ELSE
380   0000              
381   0000                    IFDEF TAR__clib_balloc_table_size
382   0000              
383   0000                       defc __clib_balloc_table_size = TAR__clib_balloc_table_size
384   0000              
385   0000                    ELSE
386   0000              
387   0000                       defc __clib_balloc_table_size = DEF__clib_balloc_table_size
388   0000              
389   0000                    ENDIF
390   0000              
391   0000                 ENDIF
392   0000              
393   0000              
394   0000                 IFDEF CLIB_FOPEN_MAX
395   0000              
396   0000                    defc __clib_fopen_max = CLIB_FOPEN_MAX
397   0000              
398   0000                 ELSE
399   0000              
400   0000                    IFDEF TAR__clib_fopen_max
401   0000              
402   0000                       defc __clib_fopen_max = TAR__clib_fopen_max
403   0000              
404   0000                    ELSE
405   0000              
406   0000                       defc __clib_fopen_max = DEF__clib_fopen_max
407   0000              
408   0000                    ENDIF
409   0000              
410   0000                 ENDIF
411   0000              
412   0000              
413   0000                 IFDEF CLIB_OPEN_MAX
414   0000              
415   0000                    defc __clib_open_max = CLIB_OPEN_MAX
416   0000              
417   0000                 ELSE
418   0000              
419   0000                    IFDEF TAR__clib_open_max
420   0000              
421   0000                       defc __clib_open_max = TAR__clib_open_max
422   0000              
423   0000                    ELSE
424   0000              
425   0000                       defc __clib_open_max = DEF__clib_open_max
426   0000              
427   0000                    ENDIF
428   0000              
429   0000                 ENDIF
430   0000              
431   0000              
432   0000                 IFDEF CRT_ENABLE_RST
433   0000              
434   0000                    defc __crt_enable_rst = CRT_ENABLE_RST
435   0000              
436   0000                 ELSE
437   0000              
438   0000                    IFDEF TAR__crt_enable_rst
439   0000              
440   0000                       defc __crt_enable_rst = TAR__crt_enable_rst
441   0000              
442   0000                    ELSE
443   0000              
444   0000                       defc __crt_enable_rst = DEF__crt_enable_rst
445   0000              
446   0000                    ENDIF
447   0000              
448   0000                 ENDIF
449   0000              
450   0000              
451   0000                 IFDEF CRT_ENABLE_NMI
452   0000              
453   0000                    defc __crt_enable_nmi = CRT_ENABLE_NMI
454   0000              
455   0000                 ELSE
456   0000              
457   0000                    IFDEF TAR__crt_enable_nmi
458   0000              
459   0000                       defc __crt_enable_nmi = TAR__crt_enable_nmi
460   0000              
461   0000                    ELSE
462   0000              
463   0000                       defc __crt_enable_nmi = DEF__crt_enable_nmi
464   0000              
465   0000                    ENDIF
466   0000              
467   0000                 ENDIF
468   0000              
469   0000              
470   0000                 ;; public definitions
471   0000              
472   0000                 PUBLIC __exit_stack_size
473   0000                 PUBLIC __quickexit_stack_size
474   0000              
475   0000                 defc __exit_stack_size = __clib_exit_stack_size
476   0000                 defc __quickexit_stack_size = __clib_quickexit_stack_size
477   0000              
478   0000              ;; end crt rules ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
479   0000              
15    0000              
16    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
17    0000              ;; SET UP MEMORY MODEL ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
18    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
19    0000              
20    0000              include "memory_model.inc"
1     0000              
2     0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
3     0000              ;; memory model ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
4     0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
5     0000              
6     0000              IF __MMAP = -1
7     0000              
8     0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
9     0000                 ;; user supplied memory map ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
10    0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
11    0000              
12    0000                 INCLUDE "mmap.inc"
13    0000              
14    0000              ENDIF
15    0000              
16    0000              IF __MMAP = 0
17    0000              
18    0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
19    0000                 ;; standard CODE/DATA/BSS memory map ;;;;;;;;;;;;;;;;;;;;;;;
20    0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
21    0000              
22    0000                 ;;INCLUDE "../crt_memory_model.inc"
23    0000              
24    0000              
25    0000              
26    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
27    0000              ;; memory model ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
28    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
29    0000              
30    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
31    0000              
32    0000              SECTION CODE
33    0000              
34    0000              org __crt_org_code
35    0000              
36    0000              section code_crt_init
37    0000              section code_crt_main
38    0000              section code_crt_exit
39    0000              section code_crt_return
40    0000              section code_crt_common
41    0000              
42    0000              section code_driver
43    0000              section code_font
44    0000              section code_clib
45    0000                include "../../clib_code.inc"
1     0000              
2     0000              ;; clib code segments ;;;;;;;;;
3     0000              
4     0000              section code_adt_b_array
5     0000              section code_adt_b_vector
6     0000              section code_adt_ba_priority_queue
7     0000              section code_adt_ba_stack
8     0000              section code_adt_bv_priority_queue
9     0000              section code_adt_bv_stack
10    0000              section code_adt_p_forward_list
11    0000              section code_adt_p_forward_list_alt
12    0000              section code_adt_p_list
13    0000              section code_adt_p_queue
14    0000              section code_adt_p_stack
15    0000              section code_adt_w_array
16    0000              section code_adt_w_vector
17    0000              section code_adt_wa_priority_queue
18    0000              section code_adt_wa_stack
19    0000              section code_adt_wv_priority_queue
20    0000              section code_adt_wv_stack
21    0000              section code_alloc_balloc
22    0000              section code_alloc_malloc
23    0000              section code_alloc_obstack
24    0000              section code_arch
25    0000              section code_bifrost_h
26    0000              section code_bifrost_l
27    0000              section code_bifrost2
28    0000              section code_compress_aplib
29    0000              section code_compress_zx7
30    0000              section code_ctype
31    0000              section code_driver_general
32    0000              section code_driver_character_input
33    0000              section code_driver_character_output
34    0000              section code_driver_memstream
35    0000              section code_driver_terminal_input
36    0000              section code_driver_terminal_output
37    0000              section code_driver_tty
38    0000              section code_error
39    0000              section code_fcntl
40    0000              section code_font_fzx
41    0000              section code_fp_genmath
42    0000              section code_fp_math48
43    0000              section code_input
44    0000              section code_inttypes
45    0000              section code_l
46    0000              section code_l_sccz80
47    0000              section code_l_sdcc
48    0000              section code_locale
49    0000              section code_math
50    0000              section code_network
51    0000              section code_nirvanam
52    0000              section code_nirvanap
53    0000              section code_setjmp
54    0000              section code_sound_bit
55    0000              section code_stdio
56    0000              section code_stdlib
57    0000              section code_string
58    0000              section code_temp_sp1
59    0000              section code_threads
60    0000              section code_threads_mutex
61    0000              section code_z80
62    0000              
63    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
64    0000              
46    0000              section code_lib
47    0000              section code_compiler
48    0000              section code_user
49    0000              
50    0000              section rodata_driver
51    0000              section rodata_font
52    0000              section rodata_clib
53    0000                include "../../clib_rodata.inc"
1     0000              
2     0000              ;; clib rodata segments ;;;;;;;
3     0000              
4     0000              section rodata_error_strings
5     0000              section rodata_error_string_end
6     0000  00          defb 0
7     0001              section rodata_fcntl
8     0000              section rodata_font_4x8
9     0000              section rodata_font_8x8
10    0000              section rodata_font_fzx
11    0000              section rodata_input
12    0000              section rodata_sound_bit
13    0000              section rodata_stdio
14    0000              section rodata_stdlib
15    0000              
16    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
17    0000              
54    0000                ;;section rodata_error_strings
55    0000                ;;section rodata_error_string_end
56    0000                ;;defb 0
57    0000              section rodata_lib
58    0000              section rodata_compiler
59    0000              section rodata_user
60    0000              
61    0000              SECTION CODE_END
62    0000              
63    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
64    0000              
65    0000              SECTION DATA
66    0000              
67    0000              IF __crt_org_data
68    0000              
69    0000                 org __crt_org_data
70    0000              
71    0000              ELSE
72    0000              
73    0000                 IF __crt_model
74    0000              
75    0000                    "DATA section address must be specified for rom models"
76    0000              
77    0000                 ENDIF
78    0000              
79    0000              ENDIF
80    0000              
81    0000  00          defb 0
82    0001              
83    0001              section smc_driver
84    0000              section smc_font
85    0000              section smc_clib
86    0000                include "../../clib_smc.inc"
1     0000              
2     0000              ;; clib self-modifying code ;;;
3     0000              
4     0000              section smc_fcntl
5     0000              section smc_l
6     0000              section smc_sound_bit
7     0000              
8     0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
9     0000              
87    0000              section smc_lib
88    0000              section smc_compiler
89    0000              section smc_user
90    0000              
91    0000              section data_driver
92    0000              section data_font
93    0000              section data_clib
94    0000                include "../../clib_data.inc"
1     0000              
2     0000              ;; clib data segments ;;;;;;;;;
3     0000              
4     0000              section data_alloc_balloc
5     0000              section data_alloc_malloc
6     0000              section data_fcntl
7     0000              section data_fcntl_stdio_heap_head
8     0000              section data_fcntl_stdio_heap_body
9     0000              section data_fcntl_stdio_heap_tail
10    0000              section data_fcntl_fdtable_body
11    0000              section data_sound_bit
12    0000              section data_stdio
13    0000              section data_stdlib
14    0000              section data_threads
15    0000              
16    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
17    0000              
95    0000                ;;section data_fcntl_stdio_heap_head
96    0000                ;;section data_fcntl_stdio_heap_body
97    0000                ;;section data_fcntl_stdio_heap_tail
98    0000                ;;section data_fcntl_fdtable_body
99    0000              section data_lib
100   0000              section data_compiler
101   0000              section data_user
102   0000              
103   0000              SECTION DATA_END
104   0000              
105   0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
106   0000              
107   0000              SECTION BSS
108   0000              
109   0000              IF __crt_org_bss
110   0000              
111   0000                 org __crt_org_bss
112   0000              
113   0000              ELSE
114   0000              
115   0000                 IF __crt_model
116   0000              
117   0000                    org -1
118   0000              
119   0000                 ENDIF
120   0000              
121   0000              ENDIF
122   0000              
123   0000  00          defb 0
124   0001              
125   0001              section BSS_UNINITIALIZED
126   0000              
127   0000              section bss_driver
128   0000              section bss_font
129   0000              section bss_clib
130   0000                include "../../clib_bss.inc"
1     0000              
2     0000              ;; clib bss segments ;;;;;;;;;;
3     0000              
4     0000              section bss_arch
5     0000              section bss_alloc_balloc
6     0000              section bss_alloc_malloc
7     0000              section bss_compress_aplib
8     0000              section bss_error
9     0000              section bss_fcntl
10    0000              section bss_input
11    0000              section bss_sound_bit
12    0000              section bss_stdio
13    0000              section bss_stdlib
14    0000              section bss_string
15    0000              
16    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
17    0000              
131   0000              section bss_lib
132   0000              section bss_compiler
133   0000              section bss_user
134   0000              
135   0000              SECTION BSS_END
136   0000              
137   0000              ;; end memory model ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
138   0000              
139   0000              
140   0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
141   0000              
142   0000              ENDIF
143   0000              
144   0000              ;; end memory model ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
145   0000              
21    0000              
22    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
23    0000              ;; GLOBAL SYMBOLS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
24    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
25    0000              
26    0000              include "../clib_constants.inc"
1     0000              
2     0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
3     0000              ;; library constants ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
4     0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
5     0000              
6     0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
7     0000                 ;; error
8     0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
9     0000              
10    0000                 ; keep consistent with "errno.h"
11    0000              
12    0000                 PUBLIC __EOK, __EACCES, __EBADF
13    0000                 PUBLIC __EBDFD, __EDOM, __EFBIG
14    0000                 PUBLIC __EINVAL, __EMFILE, __ENFILE
15    0000                 PUBLIC __ENOLCK, __ENOMEM, __ENOTSUP
16    0000                 PUBLIC __EOVERFLOW, __ERANGE, __ESTAT
17    0000                 PUBLIC __EWOULDBLOCK, __EAGAIN
18    0000              
19    0000                 defgroup
20    0000                 {
21    0000                    __EOK = 0,
22    0000                    __EACCES,
23    0000                    __EBADF,
24    0000                    __EBDFD,
25    0000                    __EDOM,
26    0000                    __EFBIG,
27    0000                    __EINVAL,
28    0000                    __EMFILE,
29    0000                    __ENFILE,
30    0000                    __ENOLCK,
31    0000                    __ENOMEM,
32    0000                    __ENOTSUP,
33    0000                    __EOVERFLOW,
34    0000                    __ERANGE,
35    0000                    __ESTAT,
36    0000                    __EWOULDBLOCK,
37    0000                    __EAGAIN = __EWOULDBLOCK,
38    0000              
39    0000                    ; define next error number for targets
40    0000              
41    0000                    __ERROR_NEXT__ = 50
42    0000                 }
43    0000              
44    0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
45    0000                 ;; stdio
46    0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
47    0000              
48    0000                 ; must not be changed consistent with "stdio.h"
49    0000              
50    0000                 PUBLIC STDIO_SEEK_SET, STDIO_SEEK_CUR, STDIO_SEEK_END
51    0000              
52    0000                 defc STDIO_SEEK_SET = 0
53    0000                 defc STDIO_SEEK_CUR = 1
54    0000                 defc STDIO_SEEK_END = 2
55    0000              
56    0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
57    0000                 ;; threads
58    0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
59    0000              
60    0000                 PUBLIC mtx_plain, mtx_recursive, mtx_timed
61    0000              
62    0000                 defc mtx_plain     = $01
63    0000                 defc mtx_recursive = $02
64    0000                 defc mtx_timed     = $04
65    0000              
66    0000                 PUBLIC thrd_success, thrd_error, thrd_nomem
67    0000                 PUBLIC thrd_busy, thrd_timedout
68    0000              
69    0000                 defc thrd_success  = $0000
70    0000                 defc thrd_error    = $0001
71    0000                 defc thrd_nomem    = $0002
72    0000                 defc thrd_busy     = $0004
73    0000                 defc thrd_timedout = $0008
74    0000              
75    0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
76    0000                 ;; messages
77    0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
78    0000              
79    0000                 ; relative sequence of these messages is significant
80    0000                 ; but can insert other messages as needed
81    0000              
82    0000                 PUBLIC STDIO_MSG_PUTC, STDIO_MSG_WRIT, STDIO_MSG_GETC
83    0000                 PUBLIC STDIO_MSG_EATC, STDIO_MSG_READ, STDIO_MSG_SEEK
84    0000                 PUBLIC STDIO_MSG_ICTL, STDIO_MSG_FLSH, STDIO_MSG_CLOS
85    0000              
86    0000                 PUBLIC ITERM_MSG_GETC, ITERM_MSG_PUTC, ITERM_MSG_PRINT_CURSOR
87    0000                 PUBLIC ITERM_MSG_ERASE_CURSOR, ITERM_MSG_BS, ITERM_MSG_BS_PWD
88    0000                 PUBLIC ITERM_MSG_READLINE_BEGIN, ITERM_MSG_READLINE_END, ITERM_MSG_BELL
89    0000                 PUBLIC ITERM_MSG_ERASE_CURSOR_PWD, ITERM_MSG_INTERRUPT
90    0000              
91    0000                 PUBLIC OTERM_MSG_PUTC, OTERM_MSG_TTY, OTERM_MSG_PRINTC
92    0000                 PUBLIC OTERM_MSG_SCROLL, OTERM_MSG_CLS, OTERM_MSG_PAUSE
93    0000                 PUBLIC OTERM_MSG_BELL, OTERM_MSG_PSCROLL
94    0000              
95    0000                 defgroup
96    0000                 {
97    0000                    ; stdio messages
98    0000              
99    0000                    STDIO_MSG_PUTC = 1,
100   0000                    STDIO_MSG_WRIT,
101   0000                    STDIO_MSG_GETC,
102   0000                    STDIO_MSG_EATC,
103   0000                    STDIO_MSG_READ,
104   0000                    STDIO_MSG_SEEK,
105   0000                    STDIO_MSG_ICTL,
106   0000                    STDIO_MSG_FLSH,
107   0000                    STDIO_MSG_CLOS,
108   0000              
109   0000                    ; input terminal messages
110   0000              
111   0000                    ITERM_MSG_GETC = 15,
112   0000                    ITERM_MSG_INTERRUPT,
113   0000                    ITERM_MSG_PUTC,
114   0000                    ITERM_MSG_PRINT_CURSOR,
115   0000                    ITERM_MSG_ERASE_CURSOR,
116   0000                    ITERM_MSG_ERASE_CURSOR_PWD,
117   0000                    ITERM_MSG_BS,
118   0000                    ITERM_MSG_BS_PWD,
119   0000                    ITERM_MSG_READLINE_BEGIN,
120   0000                    ITERM_MSG_READLINE_END,
121   0000                    ITERM_MSG_BELL,
122   0000              
123   0000                    __MESSAGE_ITERM_NEXT__,
124   0000              
125   0000                    ; output terminal messages
126   0000              
127   0000                    OTERM_MSG_PUTC = 30,
128   0000                    OTERM_MSG_TTY,
129   0000                    OTERM_MSG_PRINTC,
130   0000                    OTERM_MSG_SCROLL,
131   0000                    OTERM_MSG_CLS,
132   0000                    OTERM_MSG_PAUSE,
133   0000                    OTERM_MSG_BELL,
134   0000                    OTERM_MSG_PSCROLL,
135   0000              
136   0000                    __MESSAGE_OTERM_NEXT__,
137   0000              
138   0000                    ; define next message id for targets
139   0000              
140   0000                    __MESSAGE_NEXT__ = 45
141   0000              
142   0000                 }
143   0000              
144   0000                 ; serial character i/o messages
145   0000              
146   0000                 PUBLIC ICHAR_MSG_GETC
147   0000                 PUBLIC OCHAR_MSG_PUTC_BIN, OCHAR_MSG_PUTC
148   0000              
149   0000                 defc ICHAR_MSG_GETC     = ITERM_MSG_GETC
150   0000                 defc OCHAR_MSG_PUTC_BIN = OTERM_MSG_PUTC
151   0000                 defc OCHAR_MSG_PUTC     = OTERM_MSG_PRINTC
152   0000              
153   0000              
154   0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
155   0000                 ;; ioctls
156   0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
157   0000              
158   0000                 ; bit patterns are significant, consistent with "ioctl.h"
159   0000              
160   0000                 ; all devices, FILE type = $00
161   0000              
162   0000                 PUBLIC IOCTL_RESET
163   0000              
164   0000                 defc IOCTL_RESET = $0000
165   0000              
166   0000                 ; console_01_input_terminal, FILE type = $01
167   0000              
168   0000                 PUBLIC IOCTL_ITERM_ECHO, IOCTL_ITERM_PASS, IOCTL_ITERM_LINE
169   0000                 PUBLIC IOCTL_ITERM_COOK, IOCTL_ITERM_CAPS, IOCTL_ITERM_CRLF
170   0000                 PUBLIC IOCTL_ITERM_CURS
171   0000              
172   0000                 defc IOCTL_ITERM_ECHO = $c081
173   0000                 defc IOCTL_ITERM_PASS = $c041
174   0000                 defc IOCTL_ITERM_LINE = $c021
175   0000                 defc IOCTL_ITERM_COOK = $c011
176   0000                 defc IOCTL_ITERM_CAPS = $c009
177   0000                 defc IOCTL_ITERM_CRLF = $c101
178   0000                 defc IOCTL_ITERM_CURS = $c201
179   0000              
180   0000                 PUBLIC IOCTL_ITERM_TIE, IOCTL_ITERM_GET_EDITBUF, IOCTL_ITERM_SET_EDITBUF
181   0000              
182   0000                 defc IOCTL_ITERM_TIE         = $0201
183   0000                 defc IOCTL_ITERM_GET_EDITBUF = $0381
184   0000                 defc IOCTL_ITERM_SET_EDITBUF = $0301
185   0000              
186   0000                 ; console_01_output_terminal, FILE type = $02
187   0000              
188   0000                 PUBLIC IOCTL_OTERM_PAGE, IOCTL_OTERM_PAUSE, IOCTL_OTERM_COOK
189   0000                 PUBLIC IOCTL_OTERM_CRLF, IOCTL_OTERM_CLEAR, IOCTL_OTERM_SIGNAL
190   0000                 PUBLIC IOCTL_OTERM_BELL
191   0000              
192   0000                 defc IOCTL_OTERM_PAGE   = $c082
193   0000                 defc IOCTL_OTERM_PAUSE  = $c042
194   0000                 defc IOCTL_OTERM_COOK   = $c022
195   0000                 defc IOCTL_OTERM_CRLF   = $c012
196   0000                 defc IOCTL_OTERM_CLEAR  = $e002
197   0000                 defc IOCTL_OTERM_SIGNAL = $c202
198   0000                 defc IOCTL_OTERM_BELL   = $c102
199   0000              
200   0000                 PUBLIC IOCTL_OTERM_CLS, IOCTL_OTERM_RESET_SCROLL
201   0000                 PUBLIC IOCTL_OTERM_GET_WINDOW_COORD, IOCTL_OTERM_SET_WINDOW_COORD
202   0000                 PUBLIC IOCTL_OTERM_GET_WINDOW_RECT, IOCTL_OTERM_SET_WINDOW_RECT
203   0000                 PUBLIC IOCTL_OTERM_GET_CURSOR_COORD, IOCTL_OTERM_SET_CURSOR_COORD
204   0000                 PUBLIC IOCTL_OTERM_GET_OTERM, IOCTL_OTERM_SCROLL, IOCTL_OTERM_FONT
205   0000              
206   0000                 defc IOCTL_OTERM_CLS              = $0102
207   0000                 defc IOCTL_OTERM_RESET_SCROLL     = $0202
208   0000                 defc IOCTL_OTERM_GET_WINDOW_COORD = $0382
209   0000                 defc IOCTL_OTERM_SET_WINDOW_COORD = $0302
210   0000                 defc IOCTL_OTERM_GET_WINDOW_RECT  = $0482
211   0000                 defc IOCTL_OTERM_SET_WINDOW_RECT  = $0402
212   0000                 defc IOCTL_OTERM_GET_CURSOR_COORD = $0582
213   0000                 defc IOCTL_OTERM_SET_CURSOR_COORD = $0502
214   0000                 defc IOCTL_OTERM_GET_OTERM        = $0602
215   0000                 defc IOCTL_OTERM_SCROLL           = $0702
216   0000                 defc IOCTL_OTERM_FONT             = $0802
217   0000              
218   0000                 PUBLIC IOCTL_OTERM_FZX_GET_PAPER_COORD, IOCTL_OTERM_FZX_SET_PAPER_COORD
219   0000                 PUBLIC IOCTL_OTERM_FZX_GET_PAPER_RECT, IOCTL_OTERM_FZX_SET_PAPER_RECT
220   0000                 PUBLIC IOCTL_OTERM_FZX_LEFT_MARGIN, IOCTL_OTERM_FZX_LINE_SPACING
221   0000                 PUBLIC IOCTL_OTERM_FZX_SPACE_EXPAND
222   0000                 PUBLIC IOCTL_OTERM_FZX_GET_FZX_STATE, IOCTL_OTERM_FZX_SET_FZX_STATE
223   0000              
224   0000                 defc IOCTL_OTERM_FZX_GET_PAPER_COORD = $0a82
225   0000                 defc IOCTL_OTERM_FZX_SET_PAPER_COORD = $0a02
226   0000                 defc IOCTL_OTERM_FZX_GET_PAPER_RECT  = $0b82
227   0000                 defc IOCTL_OTERM_FZX_SET_PAPER_RECT  = $0b02
228   0000                 defc IOCTL_OTERM_FZX_LEFT_MARGIN     = $0c02
229   0000                 defc IOCTL_OTERM_FZX_LINE_SPACING    = $0d02
230   0000                 defc IOCTL_OTERM_FZX_SPACE_EXPAND    = $0e02
231   0000                 defc IOCTL_OTERM_FZX_GET_FZX_STATE   = $0f82
232   0000                 defc IOCTL_OTERM_FZX_SET_FZX_STATE   = $0f02
233   0000              
234   0000                 ; character_00_input, FILE type = $03
235   0000              
236   0000                 PUBLIC IOCTL_ICHAR_CRLF
237   0000              
238   0000                 defc IOCTL_ICHAR_CRLF = $c103
239   0000              
240   0000                 ; character_00_output, FILE type = $04
241   0000              
242   0000                 PUBLIC IOCTL_OCHAR_CRLF
243   0000              
244   0000                 defc IOCTL_OCHAR_CRLF = $c014
245   0000              
246   0000              ;; end library constants ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
247   0000              
27    0000              include "clib_target_constants.inc"
1     0000              
2     0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
3     0000              ;; target library constants ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
4     0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
5     0000              
6     0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
7     0000                 ;; target error
8     0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
9     0000              
10    0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
11    0000                 ;; target messages
12    0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
13    0000              
14    0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
15    0000                 ;; target ioctls
16    0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
17    0000              
18    0000              ;; end target library constants ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
19    0000              
28    0000              
29    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
30    0000              ;; INSTANTIATE DRIVERS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
31    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
32    0000              
33    0000              
34    0000              ; When FILEs and FDSTRUCTs are instantiated labels are assigned
35    0000              ; to point at created structures.
36    0000              ;
37    0000              ; The label formats are:
38    0000              ;
39    0000              ; __i_stdio_file_n     = address of static FILE structure #n (0..__I_STDIO_NUM_FILE-1)
40    0000              ; __i_fcntl_fdstruct_n = address of static FDSTRUCT #n (0..__I_FCNTL_NUM_FD-1)
41    0000              ; __i_fcntl_heap_n     = address of allocation #n on heap (0..__I_FCNTL_NUM_HEAP-1)
42    0000              
43    0000              
44    0000              
45    0000              ;; fd=0, stdin
46    0000              
47    0000              
48    0000              
49    0000              
50    0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
51    0000                 ; FILE  : _stdin
52    0000                 ;
53    0000                 ; driver: zalt_00_input_sysctrl
54    0000                 ; fd    : 0
55    0000                 ; mode  : read only
56    0000                 ; type  : 003 = character input
57    0000                 ;
58    0000                 ; ioctl_flags   : 0x0100
59    0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
60    0000              
61    0000              
62    0000                 SECTION data_clib
63    0000                 SECTION data_stdio
64    0000              
65    0000                 ; FILE *
66    0000              
67    0000                 PUBLIC _stdin
68    0000              
69    0000  04 00          _stdin:  defw __i_stdio_file_0 + 2
70    0002              
71    0002                 ; FILE structure
72    0002              
73    0002                 __i_stdio_file_0:
74    0002              
75    0002                    ; open files link
76    0002              
77    0002  00 00             defw 0
78    0004              
79    0004                    ; jump to underlying fd
80    0004              
81    0004  C3                defb 195			; jp (C3)
82    0005  06 00             defw __i_fcntl_fdstruct_0
83    0007              
84    0007                    ; state_flags_0
85    0007                    ; state_flags_1
86    0007                    ; conversion flags
87    0007                    ; ungetc
88    0007              
89    0007  40                defb 0x40      ; read + stdio manages ungetc + normal file type
90    0008  02                defb 0x02      ; last operation was read
91    0009  00                defb 0
92    000A  00                defb 0
93    000B              
94    000B                    ; mtx_recursive
95    000B              
96    000B  00                defb 0         ; thread owner = none
97    000C  02                defb 0x02      ; mtx_recursive
98    000D  00                defb 0         ; lock count = 0
99    000E  FE                defb 0xfe      ; atomic spinlock
100   000F  00 00             defw 0         ; list of blocked threads
101   0011              
102   0011              
103   0011                 ; fd table entry
104   0011              
105   0011                 SECTION data_fcntl_fdtable_body
106   0000  06 00          defw __i_fcntl_fdstruct_0
107   0002              
108   0002                 ; FDSTRUCT structure
109   0002              
110   0002                 SECTION data_fcntl_stdio_heap_body
111   0000              
112   0000                 EXTERN console_01_input_terminal_fdriver
113   0000                 EXTERN zalt_00_input_sysctrl
114   0000              
115   0000                 __i_fcntl_heap_0:
116   0000              
117   0000                    ; heap header
118   0000              
119   0000  17 00             defw __i_fcntl_heap_1
120   0002  17 00             defw 23
121   0004  00 00             defw 0
122   0006              
123   0006                 __i_fcntl_fdstruct_0:
124   0006              
125   0006                    ; FDSTRUCT structure
126   0006              
127   0006                    ; call to first entry to driver
128   0006              
129   0006  CD                defb 205
130   0007  00 00             defw console_01_input_terminal_fdriver
131   0009              
132   0009                    ; jump to driver
133   0009              
134   0009  C3                defb 195
135   000A  00 00             defw zalt_00_input_sysctrl
136   000C              
137   000C                    ; flags
138   000C                    ; reference_count
139   000C                    ; mode_byte
140   000C              
141   000C  03                defb 0x03      ; stdio handles ungetc + type = character input
142   000D  02                defb 2
143   000E  01                defb 0x01      ; read only
144   000F              
145   000F                    ; ioctl_flags
146   000F              
147   000F  00 01             defw 0x0100
148   0011              
149   0011                    ; mtx_plain
150   0011              
151   0011  00                defb 0         ; thread owner = none
152   0012  01                defb 0x01      ; mtx_plain
153   0013  00                defb 0         ; lock count = 0
154   0014  FE                defb 0xfe      ; atomic spinlock
155   0015  00 00             defw 0         ; list of blocked threads
156   0017              
157   0017              
158   0017                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
159   0017              
160   0017              
161   0017              ;; fd=1, stdout
162   0017              
163   0017              
164   0017              
165   0017              
166   0017                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
167   0017                 ; FILE  : _stdout
168   0017                 ;
169   0017                 ; driver: zalt_00_output_sysctrl
170   0017                 ; fd    : 1
171   0017                 ; mode  : write only
172   0017                 ; type  : 004 = character output
173   0017                 ;
174   0017                 ; ioctl_flags   : 0x0010
175   0017                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
176   0017              
177   0017              
178   0017                 SECTION data_clib
179   0000                 SECTION data_stdio
180   0011              
181   0011                 ; FILE *
182   0011              
183   0011                 PUBLIC _stdout
184   0011              
185   0011  15 00          _stdout:  defw __i_stdio_file_1 + 2
186   0013              
187   0013                 ; FILE structure
188   0013              
189   0013                 __i_stdio_file_1:
190   0013              
191   0013                    ; open files link
192   0013              
193   0013  02 00             defw __i_stdio_file_0
194   0015              
195   0015                    ; jump to underlying fd
196   0015              
197   0015  C3                defb 195			; jp (C3)
198   0016  1D 00             defw __i_fcntl_fdstruct_1
199   0018              
200   0018                    ; state_flags_0
201   0018                    ; state_flags_1
202   0018                    ; conversion flags
203   0018                    ; ungetc
204   0018              
205   0018  80                defb 0x80         ; write + normal file type
206   0019  00                defb 0            ; last operation was write
207   001A  00                defb 0
208   001B  00                defb 0
209   001C              
210   001C                    ; mtx_recursive
211   001C              
212   001C  00                defb 0         ; thread owner = none
213   001D  02                defb 0x02      ; mtx_recursive
214   001E  00                defb 0         ; lock count = 0
215   001F  FE                defb 0xfe      ; atomic spinlock
216   0020  00 00             defw 0         ; list of blocked threads
217   0022              
218   0022              
219   0022                 ; fd table entry
220   0022              
221   0022                 SECTION data_fcntl_fdtable_body
222   0002  1D 00          defw __i_fcntl_fdstruct_1
223   0004              
224   0004                 ; FDSTRUCT structure
225   0004              
226   0004                 SECTION data_fcntl_stdio_heap_body
227   0017              
228   0017                 EXTERN console_01_output_terminal_fdriver
229   0017                 EXTERN zalt_00_output_sysctrl
230   0017              
231   0017                 __i_fcntl_heap_1:
232   0017              
233   0017                    ; heap header
234   0017              
235   0017  2E 00             defw __i_fcntl_heap_2
236   0019  17 00             defw 23
237   001B  00 00             defw __i_fcntl_heap_0
238   001D              
239   001D                 __i_fcntl_fdstruct_1:
240   001D              
241   001D                    ; FDSTRUCT structure
242   001D              
243   001D                    ; call to first entry to driver
244   001D              
245   001D  CD                defb 205
246   001E  00 00             defw console_01_output_terminal_fdriver
247   0020              
248   0020                    ; jump to driver
249   0020              
250   0020  C3                defb 195
251   0021  00 00             defw zalt_00_output_sysctrl
252   0023              
253   0023                    ; flags
254   0023                    ; reference_count
255   0023                    ; mode_byte
256   0023              
257   0023  04                defb 0x04      ; type = character output
258   0024  02                defb 2
259   0025  02                defb 0x02      ; write only
260   0026              
261   0026                    ; ioctl_flags
262   0026              
263   0026  10 00             defw 0x0010
264   0028              
265   0028                    ; mtx_plain
266   0028              
267   0028  00                defb 0         ; thread owner = none
268   0029  01                defb 0x01      ; mtx_plain
269   002A  00                defb 0         ; lock count = 0
270   002B  FE                defb 0xfe      ; atomic spinlock
271   002C  00 00             defw 0         ; list of blocked threads
272   002E              
273   002E              
274   002E                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
275   002E              
276   002E              
277   002E              ;; fd=2, stderr
278   002E              
279   002E              
280   002E              
281   002E                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
282   002E                 ; DUPED FILE DESCRIPTOR
283   002E                 ;
284   002E                 ; FILE  : _stderr
285   002E                 ; flags : 0x80
286   002E                 ;
287   002E                 ; fd    : 2
288   002E                 ; dup fd: __i_fcntl_fdstruct_1
289   002E                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
290   002E              
291   002E              
292   002E                 SECTION data_clib
293   0000                 SECTION data_stdio
294   0022              
295   0022                 ; FILE *
296   0022              
297   0022                 PUBLIC _stderr
298   0022              
299   0022  26 00          _stderr:  defw __i_stdio_file_2 + 2
300   0024              
301   0024                 ; FILE structure
302   0024              
303   0024                 __i_stdio_file_2:
304   0024              
305   0024                    ; open files link
306   0024              
307   0024  13 00             defw __i_stdio_file_1
308   0026              
309   0026                    ; jump to duped fd
310   0026              
311   0026  C3                defb 195
312   0027  1D 00             defw __i_fcntl_fdstruct_1
313   0029              
314   0029                    ; state_flags_0
315   0029                    ; state_flags_1
316   0029                    ; conversion flags
317   0029                    ; ungetc
318   0029              
319   0029  80                defb 0x80
320   002A  00                defb 0
321   002B  00                defb 0
322   002C  00                defb 0
323   002D              
324   002D                    ; mtx_recursive
325   002D              
326   002D  00                defb 0         ; thread owner = none
327   002E  02                defb 0x02      ; mtx_recursive
328   002F  00                defb 0         ; lock count = 0
329   0030  FE                defb 0xfe      ; atomic spinlock
330   0031  00 00             defw 0         ; list of blocked threads
331   0033              
332   0033              
333   0033                 ; fd table entry
334   0033              
335   0033                 SECTION data_fcntl_fdtable_body
336   0004  1D 00          defw __i_fcntl_fdstruct_1
337   0006              
338   0006                 ; FDSTRUCT structure
339   0006              
340   0006                 defc __i_fcntl_fdstruct_2 = __i_fcntl_fdstruct_1
341   0006              
342   0006                 ; adjust reference count on duped FDSTRUCT
343   0006              
344   0006                 SECTION code_crt_init
345   0000              
346   0000  21 24 00       ld hl,__i_fcntl_fdstruct_1 + 7     ; & FDSTRUCT.ref_count
347   0003  34             inc (hl)
348   0004  34             inc (hl)
349   0005              
350   0005              
351   0005                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
352   0005              
353   0005              
354   0005              
355   0005                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
356   0005                 ;; create open and closed FILE lists
357   0005                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
358   0005              
359   0005                 ; __clib_fopen_max   = max number of open FILEs specified by user
360   0005                 ; 3 = number of static FILEs instantiated in crt
361   0005                 ; __i_stdio_file_n   = address of static FILE structure #n (0..I_STDIO_FILE_NUM-1)
362   0005              
363   0005                 SECTION data_clib
364   0000                 SECTION data_stdio
365   0033              
366   0033                 IF (__clib_fopen_max > 0) || (3 > 0)
367   0033              
368   0033                    ; number of FILEs > 0
369   0033              
370   0033                    ; construct list of open files
371   0033              
372   0033                    IF 3 > 0
373   0033              
374   0033                       ; number of FILEs statically generated > 0
375   0033              
376   0033                       SECTION data_clib
377   0000                       SECTION data_stdio
378   0033              
379   0033                       PUBLIC __stdio_open_file_list
380   0033              
381   0033  24 00                __stdio_open_file_list:  defw __i_stdio_file_2
382   0035              
383   0035                    ELSE
384   0035              
385   0035                       ; number of FILEs statically generated = 0
386   0035              
387   0035                       SECTION bss_clib
388   0035                       SECTION bss_stdio
389   0035              
390   0035                       PUBLIC __stdio_open_file_list
391   0035              
392   0035                       __stdio_open_file_list:  defw 0
393   0035              
394   0035                    ENDIF
395   0035              
396   0035                    ; construct list of closed / available FILEs
397   0035              
398   0035                    SECTION data_clib
399   0000                    SECTION data_stdio
400   0035              
401   0035                    PUBLIC __stdio_closed_file_list
402   0035              
403   0035  00 00 35 00       __stdio_closed_file_list:   defw 0, __stdio_closed_file_list
404   0039              
405   0039                    IF __clib_fopen_max > 3
406   0039              
407   0039                       ; create extra FILE structures
408   0039              
409   0039                       SECTION bss_clib
410   0039                       SECTION bss_stdio
411   0039              
412   0039                       __stdio_file_extra:      defs (__clib_fopen_max - 3) * 15
413   0039              
414   0039                       SECTION code_crt_init
415   0039              
416   0039                          ld bc,__stdio_closed_file_list
417   0039                          ld de,__stdio_file_extra
418   0039                          ld l,__clib_fopen_max - 3
419   0039              
420   0039                       loop:
421   0039              
422   0039                          push hl
423   0039              
424   0039                          EXTERN asm_p_forward_list_alt_push_front
425   0039                          call asm_p_forward_list_alt_push_front
426   0039              
427   0039                          ld de,15
428   0039                          add hl,de
429   0039                          ex de,hl
430   0039              
431   0039                          pop hl
432   0039              
433   0039                          dec l
434   0039                          jr nz, loop
435   0039              
436   0039                    ENDIF
437   0039              
438   0039                 ENDIF
439   0039              
440   0039                 IF (__clib_fopen_max = 0) && (3 = 0)
441   0039              
442   0039                    ; create empty file lists
443   0039              
444   0039                    SECTION bss_clib
445   0039                    SECTION bss_stdio
446   0039              
447   0039                    PUBLIC __stdio_open_file_list
448   0039                    __stdio_open_file_list:  defw 0
449   0039              
450   0039                    SECTION data_clib
451   0039                    SECTION data_stdio
452   0039              
453   0039                    PUBLIC __stdio_closed_file_list
454   0039                    __stdio_closed_file_list:   defw 0, __stdio_closed_file_list
455   0039              
456   0039                 ENDIF
457   0039              
458   0039                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
459   0039                 ;; create fd table
460   0039                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
461   0039              
462   0039                 ; __clib_open_max  = max number of open fds specified by user
463   0039                 ; 3 = number of static file descriptors created
464   0039              
465   0039                 PUBLIC __fcntl_fdtbl
466   0039                 PUBLIC __fcntl_fdtbl_size
467   0039              
468   0039                 IF 3 > 0
469   0039              
470   0039                    ; create rest of fd table in data segment
471   0039              
472   0039                    SECTION data_fcntl_fdtable_body
473   0006              
474   0006                    EXTERN __data_fcntl_fdtable_body_head
475   0006              
476   0006                    defc __fcntl_fdtbl = __data_fcntl_fdtable_body_head
477   0006              
478   0006                    IF __clib_open_max > 3
479   0006              
480   0006                       SECTION data_fcntl_fdtable_body
481   0006              
482   0006                       defs (__clib_open_max - 3) * 2
483   0006                       defc __fcntl_fdtbl_size = __clib_open_max
484   0006              
485   0006                    ELSE
486   0006              
487   0006                       defc __fcntl_fdtbl_size = 3
488   0006              
489   0006                    ENDIF
490   0006              
491   0006                 ELSE
492   0006              
493   0006                    IF __clib_open_max > 0
494   0006              
495   0006                       ; create fd table in bss segment
496   0006              
497   0006                       SECTION bss_clib
498   0006                       SECTION bss_fcntl
499   0006              
500   0006                       __fcntl_fdtbl:        defs __clib_open_max * 2
501   0006              
502   0006                    ELSE
503   0006              
504   0006                       ; no fd table at all
505   0006              
506   0006                       defc __fcntl_fdtbl = 0
507   0006              
508   0006                    ENDIF
509   0006              
510   0006                    defc __fcntl_fdtbl_size = __clib_open_max
511   0006              
512   0006                 ENDIF
513   0006              
514   0006                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
515   0006                 ;; finalize stdio heap
516   0006                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
517   0006              
518   0006                 ; __clib_stdio_heap_size  = desired stdio heap size in bytes
519   0006                 ; 46  = byte size of static FDSTRUCTs
520   0006                 ; 2   = number of heap allocations
521   0006                 ; __i_fcntl_heap_n     = address of allocation #n on heap (0..__I_FCNTL_NUM_HEAP-1)
522   0006              
523   0006                 IF 46 > 0
524   0006              
525   0006                    ; static FDSTRUCTs have been allocated in the heap
526   0006              
527   0006                    SECTION data_clib
528   0000                    SECTION data_fcntl
529   0000              
530   0000                    PUBLIC __stdio_heap
531   0000              
532   0000  00 00             __stdio_heap:            defw __stdio_block
533   0002              
534   0002                    SECTION data_fcntl_stdio_heap_head
535   0000              
536   0000                    __stdio_block:
537   0000              
538   0000  00                   defb 0                ; no owner
539   0001  01                   defb 0x01             ; mtx_plain
540   0002  00                   defb 0                ; number of lock acquisitions
541   0003  FE                   defb 0xfe             ; spinlock (unlocked)
542   0004  00 00                defw 0                ; list of threads blocked on mutex
543   0006              
544   0006                    IF __clib_stdio_heap_size > (46 + 14)
545   0006              
546   0006                       ; expand stdio heap to desired size
547   0006              
548   0006                       SECTION data_fcntl_stdio_heap_body
549   002E              
550   002E                       __i_fcntl_heap_2:
551   002E              
552   002E  00 00                   defw __i_fcntl_heap_3
553   0030  00 00                   defw 0
554   0032  17 00                   defw __i_fcntl_heap_1
555   0034  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0054  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0074  00 00 00 00 
                                    defs __clib_stdio_heap_size - 46 - 14
556   0078              
557   0078                       ; terminate stdio heap
558   0078              
559   0078                       SECTION data_fcntl_stdio_heap_tail
560   0000              
561   0000  00 00                __i_fcntl_heap_3:   defw 0
562   0002              
563   0002                    ELSE
564   0002              
565   0002                       ; terminate stdio heap
566   0002              
567   0002                       SECTION data_fcntl_stdio_heap_tail
568   0002              
569   0002                       __i_fcntl_heap_2:   defw 0
570   0002              
571   0002                    ENDIF
572   0002              
573   0002                 ELSE
574   0002              
575   0002                    ; no FDSTRUCTs statically created
576   0002              
577   0002                    IF __clib_stdio_heap_size > 14
578   0002              
579   0002                       SECTION data_clib
580   0002                       SECTION data_fcntl
581   0002              
582   0002                       PUBLIC __stdio_heap
583   0002              
584   0002                       __stdio_heap:         defw __stdio_block
585   0002              
586   0002                       SECTION bss_clib
587   0002                       SECTION bss_fcntl
588   0002              
589   0002                       PUBLIC __stdio_block
590   0002              
591   0002                       __stdio_block:         defs __clib_stdio_heap_size
592   0002              
593   0002                       SECTION code_crt_init
594   0002              
595   0002                       ld hl,__stdio_block
596   0002                       ld bc,__clib_stdio_heap_size
597   0002              
598   0002                       EXTERN asm_heap_init
599   0002                       call asm_heap_init
600   0002              
601   0002                    ENDIF
602   0002              
603   0002                 ENDIF
604   0002              
605   0002              
606   0002              
607   0002              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
608   0002              ;; STARTUP ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
609   0002              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
610   0002              
611   0002              SECTION CODE
612   0000              
613   0000              PUBLIC __Start, __Exit
614   0000              
615   0000              EXTERN _main
616   0000              
617   0000              ;**************************************************************
618   0000              IF __crt_org_code = 0
619   0000              ;**************************************************************
620   0000              
621   0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
622   0000              ;; rst and im1 entry ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
623   0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
624   0000              
625   0000                 ; address = 0x0000
626   0000  C3 6B 00       jp __Start
627   0003              
628   0003  5A 61 6C 74    defm "Zalt"
629   0007              
630   0007  00             defs 0x0008 - ASMPC
631   0008              
632   0008                 ; address = 0x0008
633   0008              
634   0008  3E 31          ld a, '1'
635   000A  D3 20          out ($20), a
636   000C  76             halt
637   000D              
638   000D  00 00 00       defs 0x0010 - ASMPC
639   0010              
640   0010                 ; address = 0x0010
641   0010              
642   0010  3E 32          ld a, '2'
643   0012  D3 20          out ($20), a
644   0014  76             halt
645   0015              
646   0015  00 00 00       defs 0x0018 - ASMPC
647   0018              
648   0018                 ; address = 0x0018
649   0018              
650   0018  3E 33          ld a, '3'
651   001A  D3 20          out ($20), a
652   001C  76             halt
653   001D              
654   001D  00 00 00       defs 0x0020 - ASMPC
655   0020              
656   0020                 ; address = 0x0020
657   0020              
658   0020  3E 34          ld a, '4'
659   0022  D3 20          out ($20), a
660   0024  76             halt
661   0025              
662   0025  00 00 00       defs 0x0028 - ASMPC
663   0028              
664   0028                 ; address = 0x0028
665   0028              
666   0028              
667   0028  3E 35          ld a, '5'
668   002A  D3 20          out ($20), a
669   002C  76             halt
670   002D              
671   002D              
672   002D  00 00 00       defs 0x0030 - ASMPC
673   0030              
674   0030                 ; address = 0x0030
675   0030              
676   0030  3E 36          ld a, '6'
677   0032  D3 20          out ($20), a
678   0034  76             halt
679   0035              
680   0035  00 00 00       defs 0x0038 - ASMPC
681   0038              
682   0038                 ; address = 0x0038
683   0038                 ; im1 isr
684   0038              
685   0038  3E 69          ld a, 'i'
686   003A  D3 20          out ($20), a
687   003C  76             halt
688   003D              
689   003D  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      005D  00 00 00 00 00 00 00 00 00 
                           defs 0x0066 - ASMPC
690   0066              
691   0066                 ; address = 0x0066
692   0066                 ; nmi isr
693   0066              
694   0066  3E 21          ld a, '!'
695   0068  D3 20          out ($20), a
696   006A  76             halt
697   006B              
698   006B              ;**************************************************************
699   006B              ENDIF
700   006B              ;**************************************************************
701   006B              
702   006B              
703   006B              __Start:
704   006B              
705   006B  F3          	di
706   006C  ED 56       	im 1 	; $38
707   006E              
708   006E                 ; set stack address
709   006E                 ; (optional)
710   006E  31 00 00       ld sp, $0000
711   0071              
712   0071                 ; parse command line
713   0071                 ; (optional)
714   0071              
715   0071                 ; initialize data section
716   0071              
717   0071                 include "../clib_init_data.inc"
1     0071              
2     0071                 ; initialize data section
3     0071                 ; data section is always at least one byte
4     0071              
5     0071                 IF (__crt_model = 1)
6     0071              
7     0071                    ; rom model + data section is not compressed
8     0071              
9     0071                    EXTERN __CODE_END_head
10    0071                    EXTERN __DATA_head, __DATA_END_tail
11    0071              
12    0071                    ld hl,__CODE_END_head
13    0071                    ld de,__DATA_head
14    0071                    ld bc,__DATA_END_tail - __DATA_head
15    0071              
16    0071                    ldir
17    0071              
18    0071                 ENDIF
19    0071              
20    0071                 IF (__crt_model >= 2)
21    0071              
22    0071                    ; rom model + data section is compressed
23    0071              
24    0071                    EXTERN __CODE_END_head, __DATA_head
25    0071              
26    0071                    ld hl,__CODE_END_head
27    0071                    ld de,__DATA_head
28    0071              
29    0071                    EXTERN asm_dzx7_standard
30    0071                    call asm_dzx7_standard
31    0071              
32    0071                 ENDIF
33    0071              
718   0071              
719   0071                 ; initialize bss section
720   0071              
721   0071                 include "../clib_init_bss.inc"
1     0071              
2     0071                 ; initialize bss section
3     0071              
4     0071                 IF (__crt_model | __crt_initialize_bss)
5     0071              
6     0071                       EXTERN asm_memset
7     0071                       EXTERN __BSS_UNINITIALIZED_tail, __BSS_END_tail
8     0071              
9     0071                       ld hl,__BSS_UNINITIALIZED_tail
10    0071                       ld bc,__BSS_END_tail - __BSS_UNINITIALIZED_tail
11    0071              
12    0071                       ld e,0
13    0071                       call asm_memset
14    0071              
15    0071                 ENDIF
16    0071              
722   0071              
723   0071              SECTION code_crt_init          ; user and library initialization
724   0005              SECTION code_crt_main
725   0000              
726   0000                 ; call user program
727   0000              
728   0000  CD 00 00        call _main                  ; hl = return status
729   0003              
730   0003                 ; run registered exit() functions
731   0003              
732   0003                 IF __clib_exit_stack_size > 0
733   0003              
734   0003                    EXTERN asm_exit
735   0003  C3 00 00          jp asm_exit              ; exit function jumps to __Exit
736   0006              
737   0006                 ENDIF
738   0006              
739   0006              __Exit:
740   0006              
741   0006                 ; abort(), exit(), quickexit() can be called from anywhere
742   0006                 ; so the stack may be unbalanced here
743   0006              
744   0006                 ; hl = return status
745   0006              
746   0006  E5             push hl
747   0007              
748   0007              SECTION code_crt_exit          ; user and library cleanup
749   0000              SECTION code_crt_return
750   0000              
751   0000                 ; close files
752   0000              
753   0000                 include "../clib_close.inc"
1     0000                 IF __crt_enable_close
2     0000              
3     0000                    ; close open files
4     0000              
5     0000                    ; TODO
6     0000              
7     0000                 ENDIF
8     0000              
754   0000              
755   0000  E1             pop hl                      ; hl = return status
756   0001              
757   0001                 ; exit program
758   0001              
759   0001                 ;jr ASMPC                    ; infinite loop (ASMPC means current address)
760   0001              zalt_oblivian:
761   0001  18 FE       	jr zalt_oblivian
762   0003              
763   0003              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
764   0003              ;; RUNTIME VARS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
765   0003              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
766   0003              
767   0003              SECTION BSS_UNINITIALIZED
768   0000              
769   0000              ; place any uninitialized data here (eg saved stack pointer)
770   0000              ; bss and data section initialization will not touch it
771   0000              
772   0000              include "../clib_variables.inc"
1     0000              
2     0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
3     0000              ;; library variables ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
4     0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
5     0000              
6     0000              IF __clib_balloc_table_size > 0
7     0000              
8     0000                 ; create balloc table
9     0000              
10    0000                 SECTION data_clib
11    0000                 SECTION data_alloc_balloc
12    0000              
13    0000                 PUBLIC __balloc_array
14    0000              
15    0000                 __balloc_array:             defw __balloc_table
16    0000              
17    0000                 SECTION bss_clib
18    0000                 SECTION bss_alloc_balloc
19    0000              
20    0000                 __balloc_table:             defs __clib_balloc_table_size * 2
21    0000              
22    0000              ENDIF
23    0000              
24    0000              IF __clib_malloc_heap_size = -1
25    0000              
26    0000                 ; place malloc heap between bss section and bottom of the stack
27    0000              
28    0000                 SECTION data_clib
29    0000                 SECTION data_alloc_malloc
30    0000              
31    0000                 PUBLIC __malloc_heap
32    0000              
33    0000                 EXTERN __BSS_END_tail
34    0000              
35    0000  00 00          __malloc_heap:              defw __BSS_END_tail
36    0002              
37    0002                 SECTION code_crt_init
38    0005              
39    0005  21 FF FF       ld hl,-1                    ; ensure sp == 0 is accepted
40    0008  39             add hl,sp                   ; hl = top of the stack
41    0009              
42    0009  11 00 00       ld de,__BSS_END_tail
43    000C              
44    000C  AF             xor a
45    000D  ED 52          sbc hl,de                   ; hl = space between top of stack and end of bss - 1
46    000F              
47    000F  DA 06 00       jp c, __Exit                ; if stack overlaps bss, this is a fatal error
48    0012              
49    0012  01 0E 02       ld bc,__crt_stack_size + 14 ; amount of space reserved by stack + minimum heap size - 1
50    0015  ED 42          sbc hl,bc                   ; hl = max heap size - 15
51    0017              
52    0017  DA 06 00       jp c, __Exit                ; if no room for heap, this is a fatal error
53    001A              
54    001A  01 0F 00       ld bc,15
55    001D  09             add hl,bc
56    001E              
57    001E  4D             ld c,l
58    001F  44             ld b,h                      ; bc = available heap size
59    0020              
60    0020  EB             ex de,hl                    ; hl = __BSS_END_tail = start of heap
61    0021              
62    0021                 EXTERN asm_heap_init
63    0021  CD 00 00       call asm_heap_init
64    0024              
65    0024              ENDIF
66    0024              
67    0024              IF __clib_malloc_heap_size > 14
68    0024              
69    0024                 ; create malloc heap in bss section
70    0024              
71    0024                 SECTION data_clib
72    0024                 SECTION data_alloc_malloc
73    0024              
74    0024                 PUBLIC __malloc_heap
75    0024              
76    0024                 __malloc_heap:              defw __malloc_block
77    0024              
78    0024                 SECTION bss_clib
79    0024                 SECTION bss_alloc_malloc
80    0024              
81    0024                 __malloc_block:             defs __clib_malloc_heap_size
82    0024              
83    0024                 SECTION code_crt_init
84    0024              
85    0024                 ld hl,__malloc_block
86    0024                 ld bc,__clib_malloc_heap_size
87    0024              
88    0024                 EXTERN asm_heap_init
89    0024                 call asm_heap_init
90    0024              
91    0024              ENDIF
92    0024              
93    0024                 ; create exit stack
94    0024              
95    0024                 SECTION bss_clib
96    0000                 SECTION bss_stdlib
97    0000              
98    0000                 PUBLIC __exit_stack
99    0000              
100   0000  00             __exit_stack:               defb 0
101   0001  00 00 00 00                                defs __exit_stack_size * 2
102   0005              
103   0005                 ; create quickexit stack
104   0005              
105   0005                 SECTION bss_clib
106   0000                 SECTION bss_stdlib
107   0005              
108   0005                 PUBLIC __quickexit_stack
109   0005              
110   0005  00             __quickexit_stack:          defb 0
111   0006                                             defs __quickexit_stack_size * 2
112   0006              
113   0006                 ; assign thread id
114   0006              
115   0006                 SECTION data_clib
116   0000                 SECTION data_threads
117   0000              
118   0000                 PUBLIC __thrd_id
119   0000              
120   0000  01             __thrd_id:                  defb 1
121   0001              
122   0001              ;; end library variables ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
123   0001              
773   0001              include "clib_target_variables.inc"
1     0001              
2     0001              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
3     0001              ;; target variables ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
4     0001              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
5     0001              
6     0001              ;; end target variables ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
7     0001              
774   0001              
775   0001              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
776   0001              ;; CLIB STUBS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
777   0001              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
778   0001              
779   0001              include "../clib_stubs.inc"
1     0001              
2     0001                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
3     0001                 ;; unimplemented
4     0001                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
5     0001              
6     0001                 ; system()
7     0001              
8     0001                 PUBLIC __ch_system
9     0001              
10    0001                 EXTERN error_zc
11    0001              
12    0001                 defc __ch_system = error_zc
13    0001              
14    0001                 ; threads
15    0001                 ; these functions are preliminary only
16    0001              
17    0001                 PUBLIC __thread_context_switch
18    0001                 PUBLIC __thread_block_timeout
19    0001                 PUBLIC __thread_unblock
20    0001              
21    0001                 EXTERN l_ret
22    0001              
23    0001                 defc __thread_context_switch = l_ret
24    0001                 defc __thread_block_timeout  = l_ret
25    0001                 defc __thread_unblock        = l_ret
26    0001              
27    0001                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
28    0001                 ;; dynamically generated functions
29    0001                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
30    0001              
31    0001                 IF !DEFINED_CLIB_OPT_STDIO
32    0001                    defc DEFINED_CLIB_OPT_STDIO = 1
33    0001                    defc CLIB_OPT_STDIO = 0
34    0001                 ENDIF
35    0001              
36    0001                 defc __CLIB_OPT_STDIO = CLIB_OPT_STDIO
37    0001              
38    0001                 ; dynamic printf
39    0001              
40    0001                 IF DEFINED_CLIB_OPT_PRINTF
41    0001                    IF !DEFINED_CLIB_OPT_PRINTF_2
42    0001                       defc DEFINED_CLIB_OPT_PRINTF_2 = 1
43    0001                       defc CLIB_OPT_PRINTF_2 = 0
44    0001                    ENDIF
45    0001                 ENDIF
46    0001              
47    0001                 IF DEFINED_CLIB_OPT_PRINTF_2
48    0001                    IF !DEFINED_CLIB_OPT_PRINTF
49    0001                       defc DEFINED_CLIB_OPT_PRINTF = 1
50    0001                       defc CLIB_OPT_PRINTF = 0
51    0001                    ENDIF
52    0001                 ENDIF
53    0001              
54    0001                 IF DEFINED_CLIB_OPT_PRINTF
55    0001              
56    0001                    defc __CLIB_OPT_PRINTF = CLIB_OPT_PRINTF
57    0001                    defc __CLIB_OPT_PRINTF_2 = CLIB_OPT_PRINTF_2
58    0001              
59    0001                    IF __SDCC_IY
60    0001              
61    0001                       INCLUDE "../../stdio/z80/asm_vfprintf_unlocked_iy.asm"
62    0001              
63    0001                    ELSE
64    0001              
65    0001                       INCLUDE "../../stdio/z80/asm_vfprintf_unlocked.asm"
66    0001              
67    0001                    ENDIF
68    0001              
69    0001                 ENDIF
70    0001              
71    0001                 ; dynamic scanf
72    0001              
73    0001                 IF DEFINED_CLIB_OPT_SCANF
74    0001                    IF !DEFINED_CLIB_OPT_SCANF_2
75    0001                       defc DEFINED_CLIB_OPT_SCANF_2 = 1
76    0001                       defc CLIB_OPT_SCANF_2 = 0
77    0001                    ENDIF
78    0001                 ENDIF
79    0001              
80    0001                 IF DEFINED_CLIB_OPT_SCANF_2
81    0001                    IF !DEFINED_CLIB_OPT_SCANF
82    0001                       defc DEFINED_CLIB_OPT_SCANF = 1
83    0001                       defc CLIB_OPT_SCANF = 0
84    0001                    ENDIF
85    0001                 ENDIF
86    0001              
87    0001                 IF DEFINED_CLIB_OPT_SCANF
88    0001              
89    0001                    defc __CLIB_OPT_SCANF = CLIB_OPT_SCANF
90    0001                    defc __CLIB_OPT_SCANF_2 = CLIB_OPT_SCANF_2
91    0001              
92    0001                    IF __SDCC_IY
93    0001              
94    0001                       INCLUDE "../../stdio/z80/asm_vfscanf_unlocked_iy.asm"
95    0001              
96    0001                    ELSE
97    0001              
98    0001                       INCLUDE "../../stdio/z80/asm_vfscanf_unlocked.asm"
99    0001              
100   0001                    ENDIF
101   0001              
102   0001                 ENDIF
103   0001              
780   0001              
47    0001              
48    0001              ENDIF
49    0001              
