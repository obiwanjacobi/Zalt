TAR__clib_malloc_heap_size      = $FFFFFFFF ; L page0
__clib_malloc_heap_size         = $FFFFFFFF ; L page0
CLIB_OPT_STDIO                  = $0000 ; L page0
DEF__crt_enable_eidi            = $0000 ; L page0
DEF__crt_include_preamble       = $0000 ; L page0
IOCTL_RESET                     = $0000 ; G page0
STDIO_SEEK_SET                  = $0000 ; G page0
TAR__clib_balloc_table_size     = $0000 ; L page0
TAR__clib_fopen_max             = $0000 ; L page0
TAR__clib_open_max              = $0000 ; L page0
TAR__clib_quickexit_stack_size  = $0000 ; L page0
TAR__crt_enable_commandline     = $0000 ; L page0
TAR__crt_enable_nmi             = $0000 ; L page0
TAR__crt_enable_restart         = $0000 ; L page0
TAR__crt_enable_rst             = $0000 ; L page0
TAR__crt_initialize_bss         = $0000 ; L page0
TAR__crt_model                  = $0000 ; L page0
TAR__crt_org_bss                = $0000 ; L page0
TAR__crt_org_code               = $0000 ; L page0
TAR__crt_org_data               = $0000 ; L page0
TAR__register_sp                = $0000 ; L page0
__BSS_END_size                  = $0000 ; G 
__BSS_UNINITIALIZED_size        = $0000 ; G 
__CLIB_OPT_IMATH                = $0000 ; L l_divu_16_16x8
__CLIB_OPT_IMATH                = $0000 ; L l_divu_32_32x8
__CLIB_OPT_MULTITHREAD          = $0000 ; L asm__fflushall_unlocked
__CLIB_OPT_MULTITHREAD          = $0000 ; L asm_vioctl
__CLIB_OPT_MULTITHREAD          = $0000 ; L printf
__CLIB_OPT_NUM2TXT              = $0000 ; L asm_ultoa
__CLIB_OPT_NUM2TXT              = $0000 ; L asm_utoa
__CLIB_OPT_NUM2TXT_SELECT       = $0000 ; L l_utoa
__CLIB_OPT_STDIO                = $0000 ; L asm_fflush_unlocked
__CLIB_OPT_STDIO                = $0000 ; L asm_vfprintf_unlocked
__CLIB_OPT_TXT2NUM_SELECT       = $0000 ; L l_atou
__CODE_END_size                 = $0000 ; G 
__CODE_head                     = $0000 ; G 
__CRTDEF                        = $0000 ; L page0
__DATA_END_size                 = $0000 ; G 
__EOK                           = $0000 ; G page0
__IGNORE_size                   = $0000 ; G 
__MMAP                          = $0000 ; L page0
__bss_alloc_balloc_size         = $0000 ; G 
__bss_alloc_malloc_size         = $0000 ; G 
__bss_arch_size                 = $0000 ; G 
__bss_clib_size                 = $0000 ; G 
__bss_compiler_size             = $0000 ; G 
__bss_compress_aplib_size       = $0000 ; G 
__bss_driver_size               = $0000 ; G 
__bss_fcntl_size                = $0000 ; G 
__bss_font_size                 = $0000 ; G 
__bss_input_size                = $0000 ; G 
__bss_lib_size                  = $0000 ; G 
__bss_sound_bit_size            = $0000 ; G 
__bss_stdio_size                = $0000 ; G 
__bss_string_size               = $0000 ; G 
__bss_user_size                 = $0000 ; G 
__clib_balloc_table_size        = $0000 ; L page0
__clib_fopen_max                = $0000 ; L page0
__clib_open_max                 = $0000 ; L page0
__clib_quickexit_stack_size     = $0000 ; L page0
__code_adt_b_array_size         = $0000 ; G 
__code_adt_b_vector_size        = $0000 ; G 
__code_adt_ba_priority_queue_size = $0000 ; G 
__code_adt_ba_stack_size        = $0000 ; G 
__code_adt_bv_priority_queue_size = $0000 ; G 
__code_adt_bv_stack_size        = $0000 ; G 
__code_adt_p_forward_list_alt_size = $0000 ; G 
__code_adt_p_list_size          = $0000 ; G 
__code_adt_p_queue_size         = $0000 ; G 
__code_adt_p_stack_size         = $0000 ; G 
__code_adt_w_array_size         = $0000 ; G 
__code_adt_w_vector_size        = $0000 ; G 
__code_adt_wa_priority_queue_size = $0000 ; G 
__code_adt_wa_stack_size        = $0000 ; G 
__code_adt_wv_priority_queue_size = $0000 ; G 
__code_adt_wv_stack_size        = $0000 ; G 
__code_alloc_balloc_size        = $0000 ; G 
__code_alloc_obstack_size       = $0000 ; G 
__code_arch_size                = $0000 ; G 
__code_bifrost2_size            = $0000 ; G 
__code_bifrost_h_size           = $0000 ; G 
__code_bifrost_l_size           = $0000 ; G 
__code_clib_size                = $0000 ; G 
__code_compress_aplib_size      = $0000 ; G 
__code_compress_zx7_size        = $0000 ; G 
__code_crt_common_size          = $0000 ; G 
__code_crt_exit_size            = $0000 ; G 
__code_driver_memstream_size    = $0000 ; G 
__code_driver_size              = $0000 ; G 
__code_driver_terminal_input_size = $0000 ; G 
__code_driver_terminal_output_size = $0000 ; G 
__code_driver_tty_size          = $0000 ; G 
__code_font_fzx_size            = $0000 ; G 
__code_font_size                = $0000 ; G 
__code_fp_genmath_size          = $0000 ; G 
__code_fp_math48_size           = $0000 ; G 
__code_input_size               = $0000 ; G 
__code_inttypes_size            = $0000 ; G 
__code_l_sccz80_size            = $0000 ; G 
__code_l_sdcc_size              = $0000 ; G 
__code_lib_size                 = $0000 ; G 
__code_locale_size              = $0000 ; G 
__code_network_size             = $0000 ; G 
__code_nirvanam_size            = $0000 ; G 
__code_nirvanap_size            = $0000 ; G 
__code_setjmp_size              = $0000 ; G 
__code_sound_bit_size           = $0000 ; G 
__code_temp_sp1_size            = $0000 ; G 
__code_threads_size             = $0000 ; G 
__code_user_size                = $0000 ; G 
__code_z80_size                 = $0000 ; G 
__crt_enable_restart            = $0000 ; L page0
__crt_initialize_bss            = $0000 ; L page0
__crt_model                     = $0000 ; L page0
__crt_org_bss                   = $0000 ; L page0
__crt_org_code                  = $0000 ; L page0
__crt_org_data                  = $0000 ; L page0
__data_alloc_balloc_size        = $0000 ; G 
__data_clib_size                = $0000 ; G 
__data_driver_size              = $0000 ; G 
__data_font_size                = $0000 ; G 
__data_lib_size                 = $0000 ; G 
__data_sound_bit_size           = $0000 ; G 
__data_stdlib_size              = $0000 ; G 
__data_user_size                = $0000 ; G 
__head                          = $0000 ; G 
__quickexit_stack_size          = $0000 ; G page0
__rodata_clib_size              = $0000 ; G 
__rodata_driver_size            = $0000 ; G 
__rodata_fcntl_size             = $0000 ; G 
__rodata_font_4x8_size          = $0000 ; G 
__rodata_font_8x8_size          = $0000 ; G 
__rodata_font_fzx_size          = $0000 ; G 
__rodata_font_size              = $0000 ; G 
__rodata_input_size             = $0000 ; G 
__rodata_lib_size               = $0000 ; G 
__rodata_sound_bit_size         = $0000 ; G 
__rodata_stdio_size             = $0000 ; G 
__rodata_stdlib_size            = $0000 ; G 
__rodata_user_size              = $0000 ; G 
__smc_clib_size                 = $0000 ; G 
__smc_compiler_size             = $0000 ; G 
__smc_driver_size               = $0000 ; G 
__smc_fcntl_size                = $0000 ; G 
__smc_font_size                 = $0000 ; G 
__smc_l_size                    = $0000 ; G 
__smc_lib_size                  = $0000 ; G 
__smc_sound_bit_size            = $0000 ; G 
__smc_user_size                 = $0000 ; G 
startup                         = $0000 ; L page0
thrd_success                    = $0000 ; G page0
DEFINED_CLIB_OPT_STDIO          = $0001 ; L page0
DEFINED_Z88DK_USES_SDCC         = $0001 ; L page0
STDIO_MSG_PUTC                  = $0001 ; G page0
STDIO_SEEK_CUR                  = $0001 ; G page0
TAR__crt_enable_close           = $0001 ; L page0
Z88DK_USES_SDCC                 = $0001 ; L page0
_CLIB_CFG_ASM_                  = $0001 ; L asm__fflushall_unlocked
_CLIB_CFG_ASM_                  = $0001 ; L asm_fflush_unlocked
_CLIB_CFG_ASM_                  = $0001 ; L asm_ultoa
_CLIB_CFG_ASM_                  = $0001 ; L asm_utoa
_CLIB_CFG_ASM_                  = $0001 ; L asm_vfprintf_unlocked
_CLIB_CFG_ASM_                  = $0001 ; L asm_vioctl
_CLIB_CFG_ASM_                  = $0001 ; L character_00_input_stdio_msg_getc
_CLIB_CFG_ASM_                  = $0001 ; L character_00_input_stdio_msg_read
_CLIB_CFG_ASM_                  = $0001 ; L character_00_output_ochar_putc_bin
_CLIB_CFG_ASM_                  = $0001 ; L console_01_input_terminal_fdriver
_CLIB_CFG_ASM_                  = $0001 ; L error_eacces_mc
_CLIB_CFG_ASM_                  = $0001 ; L error_ebdfd_mc
_CLIB_CFG_ASM_                  = $0001 ; L error_ebdfd_zc
_CLIB_CFG_ASM_                  = $0001 ; L error_edom_mc
_CLIB_CFG_ASM_                  = $0001 ; L error_einval_mc
_CLIB_CFG_ASM_                  = $0001 ; L error_einval_zc
_CLIB_CFG_ASM_                  = $0001 ; L error_enolck_mc
_CLIB_CFG_ASM_                  = $0001 ; L error_enolck_zc
_CLIB_CFG_ASM_                  = $0001 ; L error_enotsup_mc
_CLIB_CFG_ASM_                  = $0001 ; L error_enotsup_zc
_CLIB_CFG_ASM_                  = $0001 ; L error_erange_mc
_CLIB_CFG_ASM_                  = $0001 ; L error_erange_zc
_CLIB_CFG_ASM_                  = $0001 ; L l_atou
_CLIB_CFG_ASM_                  = $0001 ; L l_divu_16_16x8
_CLIB_CFG_ASM_                  = $0001 ; L l_divu_32_32x8
_CLIB_CFG_ASM_                  = $0001 ; L l_utoa
_CLIB_CFG_ASM_                  = $0001 ; L printf
__BSS_size                      = $0001 ; G 
__CLIB_OPT_ERROR                = $0001 ; L error_eacces_mc
__CLIB_OPT_ERROR                = $0001 ; L error_ebdfd_mc
__CLIB_OPT_ERROR                = $0001 ; L error_ebdfd_zc
__CLIB_OPT_ERROR                = $0001 ; L error_edom_mc
__CLIB_OPT_ERROR                = $0001 ; L error_einval_mc
__CLIB_OPT_ERROR                = $0001 ; L error_einval_zc
__CLIB_OPT_ERROR                = $0001 ; L error_enolck_mc
__CLIB_OPT_ERROR                = $0001 ; L error_enolck_zc
__CLIB_OPT_ERROR                = $0001 ; L error_enotsup_mc
__CLIB_OPT_ERROR                = $0001 ; L error_enotsup_zc
__CLIB_OPT_ERROR                = $0001 ; L error_erange_mc
__CLIB_OPT_ERROR                = $0001 ; L error_erange_zc
__DATA_size                     = $0001 ; G 
__EACCES                        = $0001 ; G page0
__SDCC                          = $0001 ; L __stdio_nextarg_bc
__SDCC                          = $0001 ; L __stdio_nextarg_de
__SDCC                          = $0001 ; L __stdio_nextarg_hl
__SDCC                          = $0001 ; L __stdio_printf_ii
__SDCC                          = $0001 ; L __stdio_printf_number_tail_long
__SDCC                          = $0001 ; L __stdio_varg
__SDCC                          = $0001 ; L asm__fflushall_unlocked
__SDCC                          = $0001 ; L asm_fflush_unlocked
__SDCC                          = $0001 ; L asm_ultoa
__SDCC                          = $0001 ; L asm_utoa
__SDCC                          = $0001 ; L asm_vfprintf_unlocked
__SDCC                          = $0001 ; L asm_vioctl
__SDCC                          = $0001 ; L character_00_input_stdio_msg_getc
__SDCC                          = $0001 ; L character_00_input_stdio_msg_read
__SDCC                          = $0001 ; L character_00_output_ochar_putc_bin
__SDCC                          = $0001 ; L console_01_input_terminal_fdriver
__SDCC                          = $0001 ; L error_eacces_mc
__SDCC                          = $0001 ; L error_ebdfd_mc
__SDCC                          = $0001 ; L error_ebdfd_zc
__SDCC                          = $0001 ; L error_edom_mc
__SDCC                          = $0001 ; L error_einval_mc
__SDCC                          = $0001 ; L error_einval_zc
__SDCC                          = $0001 ; L error_enolck_mc
__SDCC                          = $0001 ; L error_enolck_zc
__SDCC                          = $0001 ; L error_enotsup_mc
__SDCC                          = $0001 ; L error_enotsup_zc
__SDCC                          = $0001 ; L error_erange_mc
__SDCC                          = $0001 ; L error_erange_zc
__SDCC                          = $0001 ; L l_atou
__SDCC                          = $0001 ; L l_divu_16_16x8
__SDCC                          = $0001 ; L l_divu_32_32x8
__SDCC                          = $0001 ; L l_utoa
__SDCC                          = $0001 ; L printf
__SDCC_IY                       = $0001 ; L __stdio_nextarg_bc
__SDCC_IY                       = $0001 ; L __stdio_nextarg_de
__SDCC_IY                       = $0001 ; L __stdio_nextarg_hl
__SDCC_IY                       = $0001 ; L __stdio_printf_ii
__SDCC_IY                       = $0001 ; L __stdio_printf_number_tail_long
__SDCC_IY                       = $0001 ; L __stdio_varg
__SDCC_IY                       = $0001 ; L asm__fflushall_unlocked
__SDCC_IY                       = $0001 ; L asm_fflush_unlocked
__SDCC_IY                       = $0001 ; L asm_ultoa
__SDCC_IY                       = $0001 ; L asm_utoa
__SDCC_IY                       = $0001 ; L asm_vfprintf_unlocked
__SDCC_IY                       = $0001 ; L asm_vioctl
__SDCC_IY                       = $0001 ; L character_00_input_stdio_msg_getc
__SDCC_IY                       = $0001 ; L character_00_input_stdio_msg_read
__SDCC_IY                       = $0001 ; L character_00_output_ochar_putc_bin
__SDCC_IY                       = $0001 ; L console_01_input_terminal_fdriver
__SDCC_IY                       = $0001 ; L error_eacces_mc
__SDCC_IY                       = $0001 ; L error_ebdfd_mc
__SDCC_IY                       = $0001 ; L error_ebdfd_zc
__SDCC_IY                       = $0001 ; L error_edom_mc
__SDCC_IY                       = $0001 ; L error_einval_mc
__SDCC_IY                       = $0001 ; L error_einval_zc
__SDCC_IY                       = $0001 ; L error_enolck_mc
__SDCC_IY                       = $0001 ; L error_enolck_zc
__SDCC_IY                       = $0001 ; L error_enotsup_mc
__SDCC_IY                       = $0001 ; L error_enotsup_zc
__SDCC_IY                       = $0001 ; L error_erange_mc
__SDCC_IY                       = $0001 ; L error_erange_zc
__SDCC_IY                       = $0001 ; L l_atou
__SDCC_IY                       = $0001 ; L l_divu_16_16x8
__SDCC_IY                       = $0001 ; L l_divu_32_32x8
__SDCC_IY                       = $0001 ; L l_utoa
__SDCC_IY                       = $0001 ; L page0
__SDCC_IY                       = $0001 ; L printf
__crt_enable_close              = $0001 ; L page0
__data_threads_size             = $0001 ; G 
__rodata_error_string_end_size  = $0001 ; G 
isr_table_index                 = $0001 ; L page0
mtx_plain                       = $0001 ; G page0
thrd_error                      = $0001 ; G page0
STDIO_MSG_WRIT                  = $0002 ; G page0
STDIO_SEEK_END                  = $0002 ; G page0
TAR__clib_exit_stack_size       = $0002 ; L page0
__EBADF                         = $0002 ; G page0
__bss_error_size                = $0002 ; G 
__clib_exit_stack_size          = $0002 ; L page0
__data_alloc_malloc_size        = $0002 ; G 
__data_compiler_size            = $0002 ; G 
__data_fcntl_size               = $0002 ; G 
__data_fcntl_stdio_heap_tail_size = $0002 ; G 
__exit_stack_size               = $0002 ; G page0
mtx_recursive                   = $0002 ; G page0
thrd_nomem                      = $0002 ; G page0
STDIO_MSG_GETC                  = $0003 ; G page0
__EBDFD                         = $0003 ; G page0
__code_crt_return_size          = $0003 ; G 
__fcntl_fdtbl_size              = $0003 ; G page0
STDIO_MSG_EATC                  = $0004 ; G page0
__EDOM                          = $0004 ; G page0
mtx_timed                       = $0004 ; G page0
thrd_busy                       = $0004 ; G page0
STDIO_MSG_READ                  = $0005 ; G page0
__EFBIG                         = $0005 ; G page0
STDIO_MSG_SEEK                  = $0006 ; G page0
__EINVAL                        = $0006 ; G page0
__bss_stdlib_size               = $0006 ; G 
__code_adt_p_forward_list_size  = $0006 ; G 
__data_fcntl_fdtable_body_size  = $0006 ; G 
__data_fcntl_stdio_heap_head_size = $0006 ; G 
DEF__crt_enable_streams         = $0007 ; L page0
STDIO_MSG_ICTL                  = $0007 ; G page0
__EMFILE                        = $0007 ; G page0
__code_crt_main_size            = $0007 ; G 
STDIO_MSG_FLSH                  = $0008 ; G page0
__ENFILE                        = $0008 ; G page0
thrd_timedout                   = $0008 ; G page0
STDIO_MSG_CLOS                  = $0009 ; G page0
__ENOLCK                        = $0009 ; G page0
__code_ctype_size               = $0009 ; G 
CHAR_LF                         = $000A ; L character_00_input_stdio_msg_read
CHAR_LF                         = $000A ; L character_00_output_ochar_putc_bin
__ENOMEM                        = $000A ; G page0
__ENOTSUP                       = $000B ; G page0
__EOVERFLOW                     = $000C ; G page0
__code_compiler_size            = $000C ; G 
CHAR_CR                         = $000D ; L character_00_input_stdio_msg_getc
CHAR_CR                         = $000D ; L character_00_output_ochar_putc_bin
__ERANGE                        = $000D ; G page0
__ESTAT                         = $000E ; G page0
ICHAR_MSG_GETC                  = $000F ; G page0
ITERM_MSG_GETC                  = $000F ; G page0
__EAGAIN                        = $000F ; G page0
__EWOULDBLOCK                   = $000F ; G page0
ITERM_MSG_INTERRUPT             = $0010 ; G page0
ITERM_MSG_PUTC                  = $0011 ; G page0
ITERM_MSG_PRINT_CURSOR          = $0012 ; G page0
ITERM_MSG_ERASE_CURSOR          = $0013 ; G page0
ITERM_MSG_ERASE_CURSOR_PWD      = $0014 ; G page0
ITERM_MSG_BS                    = $0015 ; G page0
ITERM_MSG_BS_PWD                = $0016 ; G page0
ITERM_MSG_READLINE_BEGIN        = $0017 ; G page0
ITERM_MSG_READLINE_END          = $0018 ; G page0
ITERM_MSG_BELL                  = $0019 ; G page0
__rodata_compiler_size          = $001A ; G 
OCHAR_MSG_PUTC_BIN              = $001E ; G page0
OTERM_MSG_PUTC                  = $001E ; G page0
OTERM_MSG_TTY                   = $001F ; G page0
__code_threads_mutex_size       = $001F ; G 
OCHAR_MSG_PUTC                  = $0020 ; G page0
OTERM_MSG_PRINTC                = $0020 ; G page0
OTERM_MSG_SCROLL                = $0021 ; G page0
OTERM_MSG_CLS                   = $0022 ; G page0
__code_alloc_malloc_size        = $0022 ; G 
OTERM_MSG_PAUSE                 = $0023 ; G page0
OTERM_MSG_BELL                  = $0024 ; G page0
__code_crt_init_size            = $0024 ; G 
OTERM_MSG_PSCROLL               = $0025 ; G page0
__code_driver_general_size      = $0025 ; G 
__code_string_size              = $002A ; G 
__rodata_error_strings_size     = $0036 ; G 
__data_stdio_size               = $0039 ; G 
bios_var_ram_top_page           = $0040 ; G page0
bios_var_ram_top                = $0041 ; L page0
bios_var_ram_active_page        = $0043 ; G page0
bios_load_byte_instruction      = $0068 ; G page0
bios_load_word_instruction      = $006F ; G page0
__code_stdlib_size              = $0075 ; G 
BiosFn1                         = $0078 ; L page0
BiosFn2                         = $0078 ; L page0
BiosFn3                         = $0078 ; L page0
BiosFn4                         = $0078 ; L page0
BiosFn5                         = $0078 ; L page0
BiosFn6                         = $0078 ; L page0
__data_fcntl_stdio_heap_body_size = $0078 ; G 
TAR__clib_stdio_heap_size       = $0080 ; L page0
__clib_stdio_heap_size          = $0080 ; L page0
__code_error_size               = $0081 ; G 
__code_driver_character_output_size = $008D ; G 
__code_math_size                = $009A ; G 
__code_fcntl_size               = $009C ; G 
__code_driver_character_input_size = $00DB ; G 
__code_l_size                   = $00ED ; G 
isr_table_address               = $0100 ; L page0
IOCTL_OTERM_CLS                 = $0102 ; G page0
TAR__crt_stack_size             = $0200 ; L page0
__crt_stack_size                = $0200 ; L page0
isr_null_vector                 = $0200 ; G page0
isr_table_address_end           = $0200 ; L page0
IOCTL_ITERM_TIE                 = $0201 ; G page0
IOCTL_OTERM_RESET_SCROLL        = $0202 ; G page0
bios_trap_illegal               = $0202 ; G page0
bios_reset_init                 = $0203 ; G page0
resetWarm                       = $0228 ; L page0
__CODE_size                     = $0230 ; G 
__CODE_tail                     = $0230 ; G 
__Start                         = $0230 ; G page0
__code_crt_init_head            = $0230 ; G 
__code_crt_init_tail            = $0254 ; G 
__code_crt_main_head            = $0254 ; G 
__Exit                          = $025A ; G page0
__code_crt_exit_head            = $025B ; G 
__code_crt_exit_tail            = $025B ; G 
__code_crt_main_tail            = $025B ; G 
__code_crt_return_head          = $025B ; G 
zalt_oblivian                   = $025C ; L page0
__code_adt_b_array_head         = $025E ; G 
__code_adt_b_array_tail         = $025E ; G 
__code_adt_b_vector_head        = $025E ; G 
__code_adt_b_vector_tail        = $025E ; G 
__code_adt_ba_priority_queue_head = $025E ; G 
__code_adt_ba_priority_queue_tail = $025E ; G 
__code_adt_ba_stack_head        = $025E ; G 
__code_adt_ba_stack_tail        = $025E ; G 
__code_adt_bv_priority_queue_head = $025E ; G 
__code_adt_bv_priority_queue_tail = $025E ; G 
__code_adt_bv_stack_head        = $025E ; G 
__code_adt_bv_stack_tail        = $025E ; G 
__code_adt_p_forward_list_head  = $025E ; G 
__code_clib_head                = $025E ; G 
__code_clib_tail                = $025E ; G 
__code_crt_common_head          = $025E ; G 
__code_crt_common_tail          = $025E ; G 
__code_crt_return_tail          = $025E ; G 
__code_driver_head              = $025E ; G 
__code_driver_tail              = $025E ; G 
__code_font_head                = $025E ; G 
__code_font_tail                = $025E ; G 
asm_p_forward_list_front        = $025E ; G asm_p_forward_list_front
asm_p_forward_list_next         = $025E ; G asm_p_forward_list_next
__code_adt_p_forward_list_alt_head = $0264 ; G 
__code_adt_p_forward_list_alt_tail = $0264 ; G 
__code_adt_p_forward_list_tail  = $0264 ; G 
__code_adt_p_list_head          = $0264 ; G 
__code_adt_p_list_tail          = $0264 ; G 
__code_adt_p_queue_head         = $0264 ; G 
__code_adt_p_queue_tail         = $0264 ; G 
__code_adt_p_stack_head         = $0264 ; G 
__code_adt_p_stack_tail         = $0264 ; G 
__code_adt_w_array_head         = $0264 ; G 
__code_adt_w_array_tail         = $0264 ; G 
__code_adt_w_vector_head        = $0264 ; G 
__code_adt_w_vector_tail        = $0264 ; G 
__code_adt_wa_priority_queue_head = $0264 ; G 
__code_adt_wa_priority_queue_tail = $0264 ; G 
__code_adt_wa_stack_head        = $0264 ; G 
__code_adt_wa_stack_tail        = $0264 ; G 
__code_adt_wv_priority_queue_head = $0264 ; G 
__code_adt_wv_priority_queue_tail = $0264 ; G 
__code_adt_wv_stack_head        = $0264 ; G 
__code_adt_wv_stack_tail        = $0264 ; G 
__code_alloc_balloc_head        = $0264 ; G 
__code_alloc_balloc_tail        = $0264 ; G 
__code_alloc_malloc_head        = $0264 ; G 
asm_heap_init                   = $0264 ; G asm_heap_init
__code_alloc_malloc_tail        = $0286 ; G 
__code_alloc_obstack_head       = $0286 ; G 
__code_alloc_obstack_tail       = $0286 ; G 
__code_arch_head                = $0286 ; G 
__code_arch_tail                = $0286 ; G 
__code_bifrost2_head            = $0286 ; G 
__code_bifrost2_tail            = $0286 ; G 
__code_bifrost_h_head           = $0286 ; G 
__code_bifrost_h_tail           = $0286 ; G 
__code_bifrost_l_head           = $0286 ; G 
__code_bifrost_l_tail           = $0286 ; G 
__code_compress_aplib_head      = $0286 ; G 
__code_compress_aplib_tail      = $0286 ; G 
__code_compress_zx7_head        = $0286 ; G 
__code_compress_zx7_tail        = $0286 ; G 
__code_ctype_head               = $0286 ; G 
asm_tolower                     = $0286 ; G asm_tolower
__code_ctype_tail               = $028F ; G 
__code_driver_general_head      = $028F ; G 
console_01_input_terminal_fdriver = $028F ; G console_01_input_terminal_fdriver
console_01_output_terminal_fdriver = $028F ; G console_01_output_terminal_fdriver
device_reset_error              = $0297 ; G device_reset_error
device_return_error             = $02A0 ; G device_return_error
device_set_error                = $02A7 ; G device_set_error
__code_driver_character_input_head = $02B4 ; G 
__code_driver_general_tail      = $02B4 ; G 
zalt_00_input_sysctrl           = $02B4 ; G zalt_00_input_sysctrl_driver
zalt_00_input_sysctrl_ichar_msg_getc = $02BB ; L zalt_00_input_sysctrl_driver
character_00_input              = $02C6 ; G character_00_input
character_00_input_stdio_msg_eatc = $02EC ; G character_00_input_stdio_msg_eatc
eatc_loop                       = $02F1 ; L character_00_input_stdio_msg_eatc
IOCTL_ITERM_SET_EDITBUF         = $0301 ; G page0
IOCTL_OTERM_SET_WINDOW_COORD    = $0302 ; G page0
eatc_exit                       = $030B ; L character_00_input_stdio_msg_eatc
character_00_input_stdio_msg_getc = $030E ; G character_00_input_stdio_msg_getc
reject_cr                       = $0316 ; L character_00_input_stdio_msg_getc
cr                              = $0327 ; L character_00_input_stdio_msg_getc
character_00_input_stdio_msg_ictl = $032E ; G character_00_input_stdio_msg_ictl
_ictl_messages                  = $033C ; L character_00_input_stdio_msg_ictl
exit_error                      = $0341 ; L character_00_input_stdio_msg_ictl
character_00_input_stdio_msg_read = $0343 ; G character_00_input_stdio_msg_read
read_loop                       = $0344 ; L character_00_input_stdio_msg_read
read_exit                       = $035A ; L character_00_input_stdio_msg_read
read_exit_error                 = $0362 ; L character_00_input_stdio_msg_read
character_00_input_stdio_msg_seek = $036D ; G character_00_input_stdio_msg_seek
seek_loop                       = $0379 ; L character_00_input_stdio_msg_seek
IOCTL_ITERM_GET_EDITBUF         = $0381 ; G page0
IOCTL_OTERM_GET_WINDOW_COORD    = $0382 ; G page0
__code_driver_character_input_tail = $038F ; G 
__code_driver_character_output_head = $038F ; G 
zalt_00_output_sysctrl          = $038F ; G zalt_00_output_sysctrl_driver
zalt_00_output_sysctrl_ochar_msg_putc = $0396 ; L zalt_00_output_sysctrl_driver
character_00_output             = $039F ; G character_00_output
character_00_output_ochar_msg_putc_bin = $03C5 ; G character_00_output_ochar_putc_bin
putchar                         = $03DB ; L character_00_output_ochar_putc_bin
character_00_output_stdio_msg_ictl = $03DF ; G character_00_output_stdio_msg_ictl
exit_error                      = $03ED ; L character_00_output_stdio_msg_ictl
character_00_output_stdio_msg_putc = $03EF ; G character_00_output_stdio_msg_putc
putc_loop                       = $03F3 ; L character_00_output_stdio_msg_putc
IOCTL_OTERM_SET_WINDOW_RECT     = $0402 ; G page0
character_00_output_stdio_msg_writ = $0403 ; G character_00_output_stdio_msg_writ
writ_loop                       = $0407 ; L character_00_output_stdio_msg_writ
writ_end                        = $0418 ; L character_00_output_stdio_msg_writ
__code_driver_character_output_tail = $041C ; G 
__code_driver_memstream_head    = $041C ; G 
__code_driver_memstream_tail    = $041C ; G 
__code_driver_terminal_input_head = $041C ; G 
__code_driver_terminal_input_tail = $041C ; G 
__code_driver_terminal_output_head = $041C ; G 
__code_driver_terminal_output_tail = $041C ; G 
__code_driver_tty_head          = $041C ; G 
__code_driver_tty_tail          = $041C ; G 
__code_error_head               = $041C ; G 
error_enolck_zc                 = $041E ; G error_enolck_zc
error_enolck_mc                 = $0424 ; G error_enolck_mc
errno_mc                        = $042E ; G errno_mc
error_mc                        = $0439 ; G error_mc
__ch_system                     = $0442 ; G page0
error_zc                        = $0442 ; G error_zc
error_einval_zc                 = $044A ; G error_einval_zc
error_einval_mc                 = $0450 ; G error_einval_mc
error_erange_zc                 = $0456 ; G error_erange_zc
error_erange_mc                 = $045C ; G error_erange_mc
error_eacces_mc                 = $0462 ; G error_eacces_mc
error_znc                       = $046A ; G error_znc
error_divide_by_zero_mc         = $0471 ; G error_divide_by_zero_mc
error_edom_mc                   = $0471 ; G error_edom_mc
error_enotsup_zc                = $0477 ; G error_enotsup_zc
error_enotsup_mc                = $047D ; G error_enotsup_mc
IOCTL_OTERM_GET_WINDOW_RECT     = $0482 ; G page0
error_lzc                       = $0483 ; G error_lzc
error_lznc                      = $048A ; G error_lznc
error_ebdfd_zc                  = $0491 ; G error_ebdfd_zc
error_ebdfd_mc                  = $0498 ; G error_ebdfd_mc
__code_error_tail               = $049D ; G 
__code_fcntl_head               = $049D ; G 
asm_vioctl                      = $049D ; G asm_vioctl
critical_section                = $049D ; L asm_vioctl
find_driver_loop                = $04AB ; L asm_vioctl
deliver_message                 = $04BB ; L asm_vioctl
__bool                          = $04CF ; L asm_vioctl
__setf                          = $04D6 ; L asm_vioctl
forward_ioctl                   = $04E1 ; L asm_vioctl
__getf                          = $04EA ; L asm_vioctl
asm_vioctl_driver               = $04F5 ; G asm_vioctl
IOCTL_OTERM_SET_CURSOR_COORD    = $0502 ; G page0
__fcntl_fdchain_descend         = $0511 ; G __fcntl_fdchain_descend
__fcntl_fdstruct_from_fd_2      = $0518 ; G __fcntl_fdstruct_from_fd_2
__fcntl_fdstruct_from_fd_1      = $0523 ; G __fcntl_fdstruct_from_fd_1
__code_fcntl_tail               = $0539 ; G 
__code_font_fzx_head            = $0539 ; G 
__code_font_fzx_tail            = $0539 ; G 
__code_fp_genmath_head          = $0539 ; G 
__code_fp_genmath_tail          = $0539 ; G 
__code_fp_math48_head           = $0539 ; G 
__code_fp_math48_tail           = $0539 ; G 
__code_input_head               = $0539 ; G 
__code_input_tail               = $0539 ; G 
__code_inttypes_head            = $0539 ; G 
__code_inttypes_tail            = $0539 ; G 
__code_l_head                   = $0539 ; G 
l_jpix                          = $0539 ; G l_jpix
__thread_block_timeout          = $053C ; G page0
__thread_context_switch         = $053C ; G page0
__thread_unblock                = $053C ; G page0
l_ret                           = $053C ; G l_ret
l_setmem_hl                     = $055D ; G l_setmem_hl
l_atou                          = $055E ; G l_atou
l_small_atou                    = $055E ; G l_small_atou
loop                            = $0563 ; L l_small_atou
__code_stdio_size               = $0566 ; G 
IOCTL_OTERM_GET_CURSOR_COORD    = $0582 ; G page0
overflow                        = $0583 ; L l_small_atou
l_neg_hl                        = $0586 ; G l_neg_hl
l_utod_hl                       = $058E ; G l_utod_hl
l_small_utoa                    = $0595 ; G l_small_utoa
l_utoa                          = $0595 ; G l_utoa
l_utoa_lib                      = $05A8 ; G l_small_utoa
no_leading_zeroes               = $05AA ; L l_small_utoa
leading_zeroes                  = $05B6 ; L l_small_utoa
write                           = $05B9 ; L l_small_utoa
write1s                         = $05BE ; L l_small_utoa
divide                          = $05C4 ; L l_small_utoa
divloop                         = $05C6 ; L l_small_utoa
l_utod_de                       = $05CD ; G l_utod_de
l_addu_hl_de                    = $05D4 ; G l_addu_hl_de
l_maxu_bc_hl                    = $05DA ; G l_maxu_bc_hl
bc_larger                       = $05E2 ; L l_maxu_bc_hl
l_neg_dehl                      = $05E5 ; G l_neg_dehl
l_addu_hl_bc                    = $05F7 ; G l_addu_hl_bc
l_jphl                          = $05FD ; G l_jphl
l_num2char                      = $05FE ; G l_num2char
IOCTL_OTERM_GET_OTERM           = $0602 ; G page0
alpha                           = $0605 ; L l_num2char
l_valid_base                    = $0608 ; G l_valid_base
l_decu_dehl                     = $0615 ; G l_decu_dehl
msw                             = $061B ; L l_decu_dehl
limit                           = $0621 ; L l_decu_dehl
__code_l_sccz80_head            = $0626 ; G 
__code_l_sccz80_tail            = $0626 ; G 
__code_l_sdcc_head              = $0626 ; G 
__code_l_sdcc_tail              = $0626 ; G 
__code_l_tail                   = $0626 ; G 
__code_locale_head              = $0626 ; G 
__code_locale_tail              = $0626 ; G 
__code_math_head                = $0626 ; G 
l_divu_32_32x8                  = $0626 ; G l_divu_32_32x8
l0_divu_32_32x8                 = $0627 ; G l_divu_32_32x8
l_small_divu_32_32x32           = $0639 ; G l_small_divu_32_32x32
l0_small_divu_32_32x32          = $063F ; G l_small_divu_32_32x32
l1_small_divu_32_32x32          = $064D ; G l_small_divu_32_32x32
loop_0                          = $0650 ; L l_small_divu_32_32x32
loop_1                          = $066C ; L l_small_divu_32_32x32
divide_zero                     = $0681 ; L l_small_divu_32_32x32
l_small_divu_16_16x16           = $0686 ; G l_small_divu_16_16x16
l0_small_divu_16_16x16          = $068A ; G l_small_divu_16_16x16
divisor_sixteen_bit             = $068E ; L l_small_divu_16_16x16
loop_16_0                       = $0694 ; L l_small_divu_16_16x16
loop_16_1                       = $069C ; L l_small_divu_16_16x16
l_divu_16_16x8                  = $06A6 ; G l_divu_16_16x8
l_small_divu_16_16x8            = $06A6 ; G l_small_divu_16_16x16
l0_divu_16_16x8                 = $06AA ; G l_divu_16_16x8
l0_small_divu_16_16x8           = $06AA ; G l_small_divu_16_16x16
loop_8_0                        = $06AE ; L l_small_divu_16_16x16
loop_8_2                        = $06B5 ; L l_small_divu_16_16x16
loop_8_1                        = $06B7 ; L l_small_divu_16_16x16
divide_zero                     = $06BC ; L l_small_divu_16_16x16
__code_math_tail                = $06C0 ; G 
__code_network_head             = $06C0 ; G 
__code_network_tail             = $06C0 ; G 
__code_nirvanam_head            = $06C0 ; G 
__code_nirvanam_tail            = $06C0 ; G 
__code_nirvanap_head            = $06C0 ; G 
__code_nirvanap_tail            = $06C0 ; G 
__code_setjmp_head              = $06C0 ; G 
__code_setjmp_tail              = $06C0 ; G 
__code_sound_bit_head           = $06C0 ; G 
__code_sound_bit_tail           = $06C0 ; G 
__code_stdio_head               = $06C0 ; G 
_printf                         = $06C0 ; G printf
_printf_unlocked                = $06C0 ; G printf_unlocked
asm_printf_unlocked             = $06C0 ; G asm_printf_unlocked
asm_vprintf_unlocked            = $06C8 ; G asm_vprintf_unlocked
asm1_vfprintf_unlocked          = $06CF ; G asm_vfprintf_unlocked
asm_vfprintf_unlocked           = $06CF ; G asm_vfprintf_unlocked
asm0_vfprintf_unlocked          = $06D3 ; G asm_vfprintf_unlocked
format_loop_printf              = $06DE ; L asm_vfprintf_unlocked
__format_loop_printf            = $06E0 ; L asm_vfprintf_unlocked
IOCTL_OTERM_SCROLL              = $0702 ; G page0
format_end_printf               = $0702 ; L asm_vfprintf_unlocked
flag_chars_printf               = $070F ; L asm_vfprintf_unlocked
interpret_printf                = $0719 ; L asm_vfprintf_unlocked
flags_printf                    = $071C ; L asm_vfprintf_unlocked
flags_id_printf                 = $0723 ; L asm_vfprintf_unlocked
width_printf                    = $072D ; L asm_vfprintf_unlocked
width_positive_printf           = $0743 ; L asm_vfprintf_unlocked
flag_found_printf               = $0748 ; L asm_vfprintf_unlocked
width_from_format_printf        = $074D ; L asm_vfprintf_unlocked
precision_printf                = $075A ; L asm_vfprintf_unlocked
precision_positive_printf       = $077E ; L asm_vfprintf_unlocked
precision_from_format_printf    = $0783 ; L asm_vfprintf_unlocked
end_precision_printf            = $078E ; L asm_vfprintf_unlocked
length_modifier_printf          = $0790 ; L asm_vfprintf_unlocked
converter_specifier_printf      = $0793 ; L asm_vfprintf_unlocked
common_spec_printf              = $07A9 ; L asm_vfprintf_unlocked
unrecognized_printf             = $07B1 ; L asm_vfprintf_unlocked
long_spec_printf                = $07BA ; L asm_vfprintf_unlocked
printf_return_is_4              = $07C4 ; L asm_vfprintf_unlocked
printf_I                        = $07C9 ; L asm_vfprintf_unlocked
printf_return_is_2              = $07D0 ; L asm_vfprintf_unlocked
printf_invoke_flags             = $07D3 ; L asm_vfprintf_unlocked
skip_00_printf                  = $07DB ; L asm_vfprintf_unlocked
skip_11_printf                  = $07E3 ; L asm_vfprintf_unlocked
printf_invoke                   = $07E8 ; L asm_vfprintf_unlocked
IOCTL_OTERM_FONT                = $0802 ; G page0
match_con_printf                = $0808 ; L asm_vfprintf_unlocked
match_ret_printf                = $0814 ; L asm_vfprintf_unlocked
acon_tbl_printf                 = $081C ; L asm_vfprintf_unlocked
rcon_tbl_printf                 = $0825 ; L asm_vfprintf_unlocked
lcon_tbl_printf                 = $084A ; L asm_vfprintf_unlocked
printf_return_4                 = $086F ; L asm_vfprintf_unlocked
_return_join_4_printf           = $0870 ; L asm_vfprintf_unlocked
printf_return_2                 = $0874 ; L asm_vfprintf_unlocked
_return_join_2_printf           = $0875 ; L asm_vfprintf_unlocked
error_format_precision_printf   = $0883 ; L asm_vfprintf_unlocked
error_format_width_printf       = $0884 ; L asm_vfprintf_unlocked
error_stream_printf             = $0887 ; L asm_vfprintf_unlocked
__error_stream_printf           = $088A ; L asm_vfprintf_unlocked
error_printf_converter_printf   = $0898 ; L asm_vfprintf_unlocked
__stdio_length_modifier         = $089D ; G __stdio_length_modifier
lm_loop                         = $08A3 ; L __stdio_length_modifier
lm_found                        = $08AD ; L __stdio_length_modifier
lm_double                       = $08B6 ; L __stdio_length_modifier
lm_chars                        = $08BF ; L __stdio_length_modifier
__stdio_nextarg_de              = $08CB ; G __stdio_nextarg_de
__stdio_varg_2                  = $08D0 ; G __stdio_varg
__stdio_verify_output           = $08D7 ; G __stdio_verify_output
errors                          = $08F4 ; L __stdio_verify_output
asm_fflush_unlocked             = $08FC ; G asm_fflush_unlocked
asm0_fflush_unlocked            = $0903 ; G asm_fflush_unlocked
asm1_fflush_unlocked            = $0903 ; G asm_fflush_unlocked
last_was_read                   = $0910 ; L asm_fflush_unlocked
forward_flush                   = $092D ; L asm_fflush_unlocked
last_was_write                  = $092D ; L asm_fflush_unlocked
asm__fflushall_unlocked         = $0938 ; G asm__fflushall_unlocked
file_loop                       = $093B ; L asm__fflushall_unlocked
__stdio_printf_bb               = $0949 ; G __stdio_printf_bb
__stdio_printf_c                = $094F ; G __stdio_printf_c
right_justify                   = $0959 ; L __stdio_printf_c
output_char                     = $0960 ; L __stdio_printf_c
left_justify                    = $0966 ; L __stdio_printf_c
width_padding                   = $096D ; L __stdio_printf_c
__stdio_nextarg_hl              = $0974 ; G __stdio_nextarg_hl
__stdio_printf_d                = $0979 ; G __stdio_printf_d
__stdio_printf_ii               = $097F ; G __stdio_printf_ii
padding_required                = $09B4 ; L __stdio_printf_ii
right_justify                   = $09BA ; L __stdio_printf_ii
left_justify                    = $09C5 ; L __stdio_printf_ii
write_octet                     = $09D2 ; L __stdio_printf_ii
__stdio_printf_lbb              = $09DB ; G __stdio_printf_lbb
__stdio_printf_ld               = $09E1 ; G __stdio_printf_ld
__stdio_printf_ln               = $09E7 ; G __stdio_printf_ln
__stdio_printf_lo               = $09FC ; G __stdio_printf_lo
IOCTL_OTERM_FZX_SET_PAPER_COORD = $0A02 ; G page0
__stdio_printf_lp               = $0A02 ; G __stdio_printf_lp
precision_defined               = $0A0E ; L __stdio_printf_lp
__stdio_printf_lu               = $0A1C ; G __stdio_printf_lu
__stdio_printf_lx               = $0A22 ; G __stdio_printf_lx
__stdio_printf_n                = $0A28 ; G __stdio_printf_n
__stdio_printf_number_tail_int  = $0A3B ; G __stdio_printf_number_tail_int
__stdio_printf_number_tail_uint = $0A4F ; G __stdio_printf_number_tail_int
signed_join                     = $0A56 ; L __stdio_printf_number_tail_int
__stdio_printf_number_tail_zero = $0A63 ; G __stdio_printf_number_tail
__stdio_printf_number_tail      = $0A70 ; G __stdio_printf_number_tail
IOCTL_OTERM_FZX_GET_PAPER_COORD = $0A82 ; G page0
internal_required               = $0A84 ; L __stdio_printf_number_tail
no_sign                         = $0A8C ; L __stdio_printf_number_tail
no_base_indicator               = $0A9A ; L __stdio_printf_number_tail
external_required               = $0AA2 ; L __stdio_printf_number_tail
number_zero                     = $0AA3 ; L __stdio_printf_number_tail
spacing_ok                      = $0AB3 ; L __stdio_printf_number_tail
right_justify                   = $0ABA ; L __stdio_printf_number_tail
out_internal                    = $0AC2 ; L __stdio_printf_number_tail
hex_base                        = $0AE2 ; L __stdio_printf_number_tail
octal_base                      = $0AED ; L __stdio_printf_number_tail
no_base_indicator_2             = $0AEE ; L __stdio_printf_number_tail
no_prefix_chars                 = $0AFB ; L __stdio_printf_number_tail
stream_error                    = $0B00 ; L __stdio_printf_number_tail
IOCTL_OTERM_FZX_SET_PAPER_RECT  = $0B02 ; G page0
num_is_zero                     = $0B15 ; L __stdio_printf_number_tail
left_justify                    = $0B19 ; L __stdio_printf_number_tail
__stdio_printf_number_tail_long = $0B23 ; G __stdio_printf_number_tail_long
__stdio_printf_number_tail_ulong = $0B3D ; G __stdio_printf_number_tail_long
signed_join                     = $0B4A ; L __stdio_printf_number_tail_long
zero                            = $0B62 ; L __stdio_printf_number_tail_long
__stdio_printf_o                = $0B66 ; G __stdio_printf_o
__stdio_printf_p                = $0B6C ; G __stdio_printf_p
precision_defined               = $0B78 ; L __stdio_printf_p
IOCTL_OTERM_FZX_GET_PAPER_RECT  = $0B82 ; G page0
__stdio_printf_s                = $0B86 ; G __stdio_printf_s
string_valid                    = $0B90 ; L __stdio_printf_s
precision_specified             = $0B99 ; L __stdio_printf_s
padding_required                = $0BA5 ; L __stdio_printf_s
right_justify                   = $0BAB ; L __stdio_printf_s
left_justify                    = $0BB6 ; L __stdio_printf_s
null_s                          = $0BC2 ; L __stdio_printf_s
__stdio_printf_sign             = $0BC9 ; G __stdio_printf_sign
__stdio_printf_sign_0           = $0BCC ; G __stdio_printf_sign
not_negative                    = $0BD3 ; L __stdio_printf_sign
not_plus                        = $0BDA ; L __stdio_printf_sign
__stdio_printf_u                = $0BE0 ; G __stdio_printf_u
__stdio_printf_x                = $0BE6 ; G __stdio_printf_x
__stdio_printf_padding_precision_hl = $0BEC ; G __stdio_send_output
__stdio_printf_padding_precision = $0BEE ; G __stdio_send_output
__stdio_printf_padding_precision_bc = $0BEE ; G __stdio_send_output
__stdio_printf_padding_width_hl = $0BF2 ; G __stdio_send_output
__stdio_printf_padding_width    = $0BF4 ; G __stdio_send_output
__stdio_printf_padding_width_bc = $0BF4 ; G __stdio_send_output
__stdio_send_output_chars       = $0BF6 ; G __stdio_send_output
__stdio_send_output_buffer      = $0BFD ; G __stdio_send_output
IOCTL_OTERM_FZX_LEFT_MARGIN     = $0C02 ; G page0
__stdio_send_output             = $0C02 ; G __stdio_send_output
exit                            = $0C12 ; L __stdio_send_output
error_detected                  = $0C17 ; L __stdio_send_output
__stdio_nextarg_bc              = $0C21 ; G __stdio_nextarg_bc
__code_stdio_tail               = $0C26 ; G 
__code_stdlib_head              = $0C26 ; G 
asm_exit                        = $0C26 ; G asm_exit
asm0_exit                       = $0C29 ; G asm_exit
loop                            = $0C35 ; L asm_exit
asm_ultoa                       = $0C47 ; G asm_ultoa
asm0_ultoa                      = $0C4E ; G asm_ultoa
asm1_ultoa                      = $0C54 ; G asm_ultoa
compute_lp                      = $0C56 ; L asm_ultoa
write_lp                        = $0C69 ; L asm_ultoa
asm_utoa                        = $0C70 ; G asm_utoa
asm0_utoa                       = $0C75 ; G asm_utoa
asm1_utoa                       = $0C7B ; G asm_utoa
compute_lp                      = $0C82 ; L asm_utoa
write_lp                        = $0C94 ; L asm_utoa
__code_stdlib_tail              = $0C9B ; G 
__code_string_head              = $0C9B ; G 
asm_strchrnul                   = $0C9B ; G asm_strchrnul
loop                            = $0C9B ; L asm_strchrnul
asm_strnlen                     = $0CA5 ; G asm_strnlen
notend                          = $0CB2 ; L asm_strnlen
asm__memlwr                     = $0CB5 ; G asm__memlwr
loop                            = $0CB9 ; L asm__memlwr
__code_string_tail              = $0CC5 ; G 
__code_temp_sp1_head            = $0CC5 ; G 
__code_temp_sp1_tail            = $0CC5 ; G 
__code_threads_head             = $0CC5 ; G 
__code_threads_mutex_head       = $0CC5 ; G 
__code_threads_tail             = $0CC5 ; G 
asm_mtx_init                    = $0CC5 ; G asm_mtx_init
unknown_type                    = $0CDF ; L asm_mtx_init
__code_compiler_head            = $0CE4 ; G 
__code_lib_head                 = $0CE4 ; G 
__code_lib_tail                 = $0CE4 ; G 
__code_threads_mutex_tail       = $0CE4 ; G 
__code_z80_head                 = $0CE4 ; G 
__code_z80_tail                 = $0CE4 ; G 
_main                           = $0CE4 ; G zccE3CB2
__code_compiler_tail            = $0CF0 ; G 
__code_user_head                = $0CF0 ; G 
__code_user_tail                = $0CF0 ; G 
__rodata_clib_head              = $0CF0 ; G 
__rodata_clib_tail              = $0CF0 ; G 
__rodata_driver_head            = $0CF0 ; G 
__rodata_driver_tail            = $0CF0 ; G 
__rodata_error_strings_head     = $0CF0 ; G 
__rodata_font_head              = $0CF0 ; G 
__rodata_font_tail              = $0CF0 ; G 
IOCTL_OTERM_FZX_LINE_SPACING    = $0D02 ; G page0
__rodata_error_string_end_head  = $0D26 ; G 
__rodata_error_strings_tail     = $0D26 ; G 
___str_0                        = $0D27 ; L zccE3CB2
__rodata_compiler_head          = $0D27 ; G 
__rodata_error_string_end_tail  = $0D27 ; G 
__rodata_fcntl_head             = $0D27 ; G 
__rodata_fcntl_tail             = $0D27 ; G 
__rodata_font_4x8_head          = $0D27 ; G 
__rodata_font_4x8_tail          = $0D27 ; G 
__rodata_font_8x8_head          = $0D27 ; G 
__rodata_font_8x8_tail          = $0D27 ; G 
__rodata_font_fzx_head          = $0D27 ; G 
__rodata_font_fzx_tail          = $0D27 ; G 
__rodata_input_head             = $0D27 ; G 
__rodata_input_tail             = $0D27 ; G 
__rodata_lib_head               = $0D27 ; G 
__rodata_lib_tail               = $0D27 ; G 
__rodata_sound_bit_head         = $0D27 ; G 
__rodata_sound_bit_tail         = $0D27 ; G 
__rodata_stdio_head             = $0D27 ; G 
__rodata_stdio_tail             = $0D27 ; G 
__rodata_stdlib_head            = $0D27 ; G 
__rodata_stdlib_tail            = $0D27 ; G 
__CODE_END_head                 = $0D41 ; G 
__CODE_END_tail                 = $0D41 ; G 
__DATA_head                     = $0D41 ; G 
__rodata_compiler_tail          = $0D41 ; G 
__rodata_user_head              = $0D41 ; G 
__rodata_user_tail              = $0D41 ; G 
__DATA_tail                     = $0D42 ; G 
__data_alloc_balloc_head        = $0D42 ; G 
__data_alloc_balloc_tail        = $0D42 ; G 
__data_alloc_malloc_head        = $0D42 ; G 
__data_clib_head                = $0D42 ; G 
__data_clib_tail                = $0D42 ; G 
__data_driver_head              = $0D42 ; G 
__data_driver_tail              = $0D42 ; G 
__data_font_head                = $0D42 ; G 
__data_font_tail                = $0D42 ; G 
__malloc_heap                   = $0D42 ; G page0
__smc_clib_head                 = $0D42 ; G 
__smc_clib_tail                 = $0D42 ; G 
__smc_compiler_head             = $0D42 ; G 
__smc_compiler_tail             = $0D42 ; G 
__smc_driver_head               = $0D42 ; G 
__smc_driver_tail               = $0D42 ; G 
__smc_fcntl_head                = $0D42 ; G 
__smc_fcntl_tail                = $0D42 ; G 
__smc_font_head                 = $0D42 ; G 
__smc_font_tail                 = $0D42 ; G 
__smc_l_head                    = $0D42 ; G 
__smc_l_tail                    = $0D42 ; G 
__smc_lib_head                  = $0D42 ; G 
__smc_lib_tail                  = $0D42 ; G 
__smc_sound_bit_head            = $0D42 ; G 
__smc_sound_bit_tail            = $0D42 ; G 
__smc_user_head                 = $0D42 ; G 
__smc_user_tail                 = $0D42 ; G 
__data_alloc_malloc_tail        = $0D44 ; G 
__data_fcntl_head               = $0D44 ; G 
__stdio_heap                    = $0D44 ; G page0
__data_fcntl_stdio_heap_head_head = $0D46 ; G 
__data_fcntl_tail               = $0D46 ; G 
__stdio_block                   = $0D46 ; L page0
__data_fcntl_stdio_heap_body_head = $0D4C ; G 
__data_fcntl_stdio_heap_head_tail = $0D4C ; G 
__i_fcntl_heap_0                = $0D4C ; L page0
__i_fcntl_fdstruct_0            = $0D52 ; L page0
__i_fcntl_heap_1                = $0D63 ; L page0
__i_fcntl_fdstruct_1            = $0D69 ; L page0
__i_fcntl_fdstruct_2            = $0D69 ; L page0
__i_fcntl_heap_2                = $0D7A ; L page0
__data_fcntl_stdio_heap_body_tail = $0DC4 ; G 
__data_fcntl_stdio_heap_tail_head = $0DC4 ; G 
__i_fcntl_heap_3                = $0DC4 ; L page0
__data_fcntl_fdtable_body_head  = $0DC6 ; G 
__data_fcntl_stdio_heap_tail_tail = $0DC6 ; G 
__fcntl_fdtbl                   = $0DC6 ; G page0
__data_fcntl_fdtable_body_tail  = $0DCC ; G 
__data_sound_bit_head           = $0DCC ; G 
__data_sound_bit_tail           = $0DCC ; G 
__data_stdio_head               = $0DCC ; G 
_stdin                          = $0DCC ; G page0
__i_stdio_file_0                = $0DCE ; L page0
_stdout                         = $0DDD ; G page0
__i_stdio_file_1                = $0DDF ; L page0
_stderr                         = $0DEE ; G page0
__i_stdio_file_2                = $0DF0 ; L page0
__stdio_open_file_list          = $0DFF ; G page0
__stdio_closed_file_list        = $0E01 ; G page0
IOCTL_OTERM_FZX_SPACE_EXPAND    = $0E02 ; G page0
__data_stdio_tail               = $0E05 ; G 
__data_stdlib_head              = $0E05 ; G 
__data_stdlib_tail              = $0E05 ; G 
__data_threads_head             = $0E05 ; G 
__thrd_id                       = $0E05 ; G page0
_Message                        = $0E06 ; L zccE3CB2
__data_compiler_head            = $0E06 ; G 
__data_lib_head                 = $0E06 ; G 
__data_lib_tail                 = $0E06 ; G 
__data_threads_tail             = $0E06 ; G 
__BSS_head                      = $0E08 ; G 
__DATA_END_head                 = $0E08 ; G 
__DATA_END_tail                 = $0E08 ; G 
__data_compiler_tail            = $0E08 ; G 
__data_user_head                = $0E08 ; G 
__data_user_tail                = $0E08 ; G 
__BSS_UNINITIALIZED_head        = $0E09 ; G 
__BSS_UNINITIALIZED_tail        = $0E09 ; G 
__BSS_tail                      = $0E09 ; G 
__bss_alloc_balloc_head         = $0E09 ; G 
__bss_alloc_balloc_tail         = $0E09 ; G 
__bss_alloc_malloc_head         = $0E09 ; G 
__bss_alloc_malloc_tail         = $0E09 ; G 
__bss_arch_head                 = $0E09 ; G 
__bss_arch_tail                 = $0E09 ; G 
__bss_clib_head                 = $0E09 ; G 
__bss_clib_tail                 = $0E09 ; G 
__bss_compress_aplib_head       = $0E09 ; G 
__bss_compress_aplib_tail       = $0E09 ; G 
__bss_driver_head               = $0E09 ; G 
__bss_driver_tail               = $0E09 ; G 
__bss_error_head                = $0E09 ; G 
__bss_font_head                 = $0E09 ; G 
__bss_font_tail                 = $0E09 ; G 
_errno                          = $0E09 ; G _errno
__bss_error_tail                = $0E0B ; G 
__bss_fcntl_head                = $0E0B ; G 
__bss_fcntl_tail                = $0E0B ; G 
__bss_input_head                = $0E0B ; G 
__bss_input_tail                = $0E0B ; G 
__bss_sound_bit_head            = $0E0B ; G 
__bss_sound_bit_tail            = $0E0B ; G 
__bss_stdio_head                = $0E0B ; G 
__bss_stdio_tail                = $0E0B ; G 
__bss_stdlib_head               = $0E0B ; G 
__exit_stack                    = $0E0B ; G page0
__quickexit_stack               = $0E10 ; G page0
__BSS_END_head                  = $0E11 ; G 
__BSS_END_tail                  = $0E11 ; G 
__IGNORE_head                   = $0E11 ; G 
__IGNORE_tail                   = $0E11 ; G 
__bss_compiler_head             = $0E11 ; G 
__bss_compiler_tail             = $0E11 ; G 
__bss_lib_head                  = $0E11 ; G 
__bss_lib_tail                  = $0E11 ; G 
__bss_stdlib_tail               = $0E11 ; G 
__bss_string_head               = $0E11 ; G 
__bss_string_tail               = $0E11 ; G 
__bss_user_head                 = $0E11 ; G 
__bss_user_tail                 = $0E11 ; G 
__size                          = $0E11 ; G 
__tail                          = $0E11 ; G 
IOCTL_OTERM_FZX_SET_FZX_STATE   = $0F02 ; G page0
IOCTL_OTERM_FZX_GET_FZX_STATE   = $0F82 ; G page0
IOCTL_ITERM_CAPS                = $C009 ; G page0
IOCTL_ITERM_COOK                = $C011 ; G page0
IOCTL_OTERM_CRLF                = $C012 ; G page0
IOCTL_OCHAR_CRLF                = $C014 ; G page0
IOCTL_ITERM_LINE                = $C021 ; G page0
IOCTL_OTERM_COOK                = $C022 ; G page0
IOCTL_ITERM_PASS                = $C041 ; G page0
IOCTL_OTERM_PAUSE               = $C042 ; G page0
IOCTL_ITERM_ECHO                = $C081 ; G page0
IOCTL_OTERM_PAGE                = $C082 ; G page0
IOCTL_ITERM_CRLF                = $C101 ; G page0
IOCTL_OTERM_BELL                = $C102 ; G page0
IOCTL_ICHAR_CRLF                = $C103 ; G page0
IOCTL_ITERM_CURS                = $C201 ; G page0
IOCTL_OTERM_SIGNAL              = $C202 ; G page0
IOCTL_OTERM_CLEAR               = $E002 ; G page0
DEF__crt_on_exit                = $10001 ; L page0
__CLIB_OPT_PRINTF               = $3FFFFF ; L asm_vfprintf_unlocked
