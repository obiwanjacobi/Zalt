#ifndef __VT100_H__
#define __VT100_H__

#include "StringBuilder.h"

#define VT100_CommandStart "\x1b["

/*
Device Status
The following codes are used for reporting terminal/display settings, and vary depending on the implementation:
*/

#define VT100_QueryDeviceCode "\x1b[c"
// Requests a Report Device Code response from the device.

//#define ReportDeviceCode	"\x1b[{CODE}0c"
// Generated by the device in response to Query Device Code request.
StringBuilder *VT100_ReportDeviceCode(char_t *buffer, uint16_t capacity, uint8_t code);

#define VT100_QueryDeviceStatus "\x1b[5n"
// Requests a Report Device Status response from the device.

#define VT100_ReportDeviceOK "\x1b[0n"
// Generated by the device in response to a Query Device Status request; indicates that device is functioning correctly.

#define VT100_ReportDeviceFailure "\x1b[3n"
// Generated by the device in response to a Query Device Status request; indicates that device is functioning
// improperly.

#define VT100_QueryCursorPosition "\x1b[6n"
// Requests a Report Cursor Position response from the device.

//#define ReportCursorPosition(r, c)	"\x1b[{ROW};{COLUMN}R"
// Generated by the device in response to a Query Cursor Position request; reports current cursor position.
StringBuilder *VT100_ReportCursorPosition(char_t *buffer, uint16_t capacity, uint16_t row, uint16_t col);

/*
Terminal Setup
The h and l codes are used for setting terminal/display mode, and vary depending on the implementation. Line Wrap is one
of the few setup codes that tend to be used consistently:
*/

#define VT100_ResetDevice "\x1bc"
// Reset all terminal settings to default.

#define VT100_EnableLineWrap "\x1b[7h"
// Text wraps to next line if longer than the length of the display area.

#define VT100_DisableLineWrap "\x1b[7l"
// Disables line wrapping.

/*
Fonts
Some terminals support multiple fonts: normal/bold, swiss/italic, etc. There are a variety of special codes for certain
terminals; the following are fairly standard:
*/

#define VT100_FontSetG0 "\x1b("
// Set default font.

#define VT100_FontSetG1 "\x1b)"
// Set alternate font.

/*
Cursor Control
*/

//#define VT100_CursorHome 		"\x1b[{ROW};{COLUMN}H"
#define VT100_CursorHome "\x1b[H"
// Sets the cursor position where subsequent text will begin. If no row/column parameters are provided
// (ie. "\x1b[H), the cursor will move to the home position, at the upper left of the screen.
StringBuilder *VT100_CursorHome_At(char_t *buffer, uint16_t capacity, uint16_t row, uint16_t col);

//#define VT100_CursorUp		"\x1b[{COUNT}A"
#define VT100_CursorUp "\x1b[A"
// Moves the cursor up by COUNT rows; the default count is 1.
StringBuilder *VT100_CursorUp_Count(char_t *buffer, uint16_t capacity, uint8_t count);

//#define VT100_CursorDown		"\x1b[{COUNT}B"
#define VT100_CursorDown "\x1b[B"
// Moves the cursor down by COUNT rows; the default count is 1.
StringBuilder *VT100_CursorDown_Count(char_t *buffer, uint16_t capacity, uint8_t count);

//#define VT100_CursorForward		"\x1b[{COUNT}C"
#define VT100_CursorForward "\x1b[C"
// Moves the cursor forward by COUNT columns; the default count is 1.
StringBuilder *VT100_CursorForward_Count(char_t *buffer, uint16_t capacity, uint8_t count);

//#define VT100_CursorBackward		"\x1b[{COUNT}D"
// Moves the cursor backward by COUNT columns; the default count is 1.
StringBuilder *VT100_CursorBackward_Count(char_t *buffer, uint16_t capacity, uint8_t count);

//#define VT100_ForceCursorPosition	"\x1b[{ROW};{COLUMN}f"
#define VT100_ForceCursorPosition "\x1b[f"
// Identical to Cursor Home.
StringBuilder *VT100_ForceCursorPosition_At(char_t *buffer, uint16_t capacity, uint16_t row, uint16_t col);

#define VT100_SaveCursor "\x1b[s"
// Save current cursor position.

#define VT100_UnsaveCursor "\x1b[u"
// Restores cursor position after a Save Cursor.

#define VT100_SaveCursorAndAttrs "\x1b7"
// Save current cursor position.

#define VT100_RestoreCursorAndAttrs "\x1b8"
// Restores cursor position after a Save Cursor.

/*
Scrolling
*/

#define VT100_ScrollScreen "\x1b[r"
// Enable scrolling for entire display.
//#define VT100_ScrollScreen		"\x1b[{start};{end}r"
// Enable scrolling from row {start} to row {end}.
StringBuilder *VT100_ScrollScreen_Range(char_t *buffer, uint16_t capacity, uint8_t start, uint8_t end);

#define VT100_ScrollDown "\x1bD"
// Scroll display down one line.

#define VT100_ScrollUp "\x1bM"
// Scroll display up one line.

/*
Tab Control
*/

#define VT100_SetTab "\x1bH"
// Sets a tab at the current position.

#define VT100_ClearTab "\x1b[g"
// Clears tab at the current position.

#define VT100_ClearAllTabs "\x1b[3g"
// Clears all tabs.

/*
Erasing Text
*/

#define VT100_EraseEndOfLine "\x1b[K"
// Erases from the current cursor position to the end of the current line.

#define VT100_EraseStartOfLine "\x1b[1K"
// Erases from the current cursor position to the start of the current line.

#define VT100_EraseLine "\x1b[2K"
// Erases the entire current line.

#define VT100_EraseDown "\x1b[J"
// Erases the screen from the current line down to the bottom of the screen.

#define VT100_EraseUp "\x1b[1J"
// Erases the screen from the current line up to the top of the screen.

#define VT100_EraseScreen "\x1b[2J"
// Erases the screen with the background colour and moves the cursor to home.

/*
Set Display Attributes
*/

//#define VT100_SetAttributeMode	"\x1b[{attr1};{attr2};{attrn}m"
// Sets multiple display attribute settings.
StringBuilder *VT100_SetAttributeMode(void *buffer, uint16_t capacity, uint8_t value);
StringBuilder *VT100_SetAttributeMode_Begin(void *buffer, uint16_t capacity, uint8_t value);
result_t VT100_SetAttributeMode_Add(StringBuilder *buffer, uint8_t value);
result_t VT100_SetAttributeMode_End(StringBuilder *buffer);

// The following lists standard attributes:
#define VT100_ResetAll 0
#define VT100_Bright 1
#define VT100_Dim 2
#define VT100_Underscore 4
#define VT100_Blink 5
#define VT100_Reverse 7
#define VT100_Hidden 8

//	Foreground Colours
#define VT100_Foreground_Black 30
#define VT100_Foreground_Red 31
#define VT100_Foreground_Green 32
#define VT100_Foreground_Yellow 33
#define VT100_Foreground_Blue 34
#define VT100_Foreground_Magenta 35
#define VT100_Foreground_Cyan 36
#define VT100_Foreground_White 37

//	Background Colours
#define VT100_Background_Black 40
#define VT100_Background_Red 41
#define VT100_Background_Green 42
#define VT100_Background_Yellow 43
#define VT100_Background_Blue 44
#define VT100_Background_Magenta 45
#define VT100_Background_Cyan 46
#define VT100_Background_White 47

/*	NOT IMPLEMENTED
Printing
Some terminals support local printing:

#define Print Screen		"\x1b[i"
Print the current screen.
#define Print Line		"\x1b[1i"
Print the current line.
#define Stop Print Log		"\x1b[4i"
Disable log.
#define Start Print Log		"\x1b[5i"
Start log; all received text is echoed to a printer.

Define Key
#define Set Key Definition	"\x1b[{key};\"{string}\"p"
Associates a string of text to a keyboard key. {key} indicates the key by its ASCII value in decimal.
*/

#endif //__VT100_H__
